@model List<MapSector>

@{
    ViewBag.Title = "Зоны доставки курьеров";
    Layout = "~/Views/Shared/MainPage.cshtml";
    var currentUser = ((BaseController)ViewContext.Controller).CurrentUser ?? new User() { ID = 0 };
    var helper = new PermissionHelper();

}
@section scripts{
    <script src="//api-maps.yandex.ru/2.1/?lang=ru_RU" type="text/javascript"></script>
    <script src="/Content/js/jquery.unobtrusive-ajax.min.js"></script>

    <script src="/Content/js/syronex-colorpicker.js" type="text/javascript"></script>

    <script type="text/javascript">
        var myMap = null;
        var polygon = null;
        var zonesList = new Array();
        var colors = ['#EEEEEE', '#FFFF88', '#FF7400', '#CDEB8B', '#6BBA70', '#006E2E', '#C3D9FF', '#4096EE', '#356AA0', '#FF0096', '#B02B2C', '#000000', '#FFFFFF'];
        ymaps.ready(initMap);

        function initMap() {
            myMap = new ymaps.Map('map', {
                // При инициализации карты обязательно нужно указать
                // её центр и коэффициент масштабирования.
                center: [55.75222, 37.61556], // Москва
                zoom: 11
            });
            myMap.controls.add('zoomControl');
            redrawSectors();

        }

        function createNewZone() {

            $.get('/Delivery/SectorEdit', { ShopID: @(ViewBag.ShopID), ID: 0, Type : 2 }, function(d) {
                $('#EditCell').replaceWith(d);

                initColorPicker();
                polygon = new ymaps.GeoObject({
                    geometry: {
                        type: "Polygon",
                        coordinates: []
                    }

                }, {
                    strokeColor: $('input[name="Color"]').val(),
                    fillColor: $('input[name="Color"]').val(),
                    fillOpacity: 0.5
                });

                myMap.geoObjects.add(polygon);
                polygon.editor.startDrawing();
            });
        }

        function initColorPicker() {
            var index = colors.indexOf($('input[name="Color"]').val());
            if (index < 0)
                index = colors.length - 1;

            $('#colorCell').colorPicker(
            {
                defaultColor: index, // index of the default color
                color: colors,
                click: function(c) {
                    $('input[name="Color"]').val(c);
                    if (polygon != null) {
                        polygon.options.set({ "strokeColor": c.replace('#', ''), "fillColor": c.replace('#', '') });

                    }
                }
            });
        }

        function cancelEdit() {
            $.get('/Delivery/SectorList', { ShopID: $('#ShopID').val(), Type : 2 }, function(d) {
                $('#EditCell').replaceWith(d);
                if (polygon != null) {
                    polygon.editor.stopDrawing();
                    polygon = null;
                }
                redrawSectors();
            });
            return false;
        }

        function redrawSectors() {

            for (var i = 0; i < zonesList.length; i++) {
                myMap.geoObjects.remove(zonesList[i].poly);
            }
            zonesList = new Array();

            var items = $('.sector-item');
            if ($('.sector-edit').length) {
                $.get('/Delivery/SectorList', { ShopID: $('#ShopID').val(), Type : 2 }, function(d) {
                    draw($(d).find('.sector-item'));
                })
            } else {
                draw(items);
            }

        }

        function draw(o) {
            o.each(function() {
                var coord = JSON.parse($(this).attr('points'));


                var points = new Array();
                for (var j = 0; j < coord.length; j++) {
                    var point = new Array();
                    point.push(coord[j].Lat);
                    point.push(coord[j].Lng);
                    points.push(point);
                }

                var list = new Array();
                list.push(points);

                var p = new ymaps.GeoObject({
                    geometry: {
                        type: "Polygon",
                        coordinates: list
                    },
                    properties: {
                        hintContent: $(this).find('.span-edit').text()
                    }

                }, {
                    strokeColor: $(this).attr('color'),
                    fillColor: $(this).attr('color'),
                    fillOpacity: 0.5
                });
                myMap.geoObjects.add(p);
                zonesList.push({ poly: p, id: $(this).attr('arg') });

            });
            myMap.setBounds(myMap.geoObjects.getBounds());
        }

        function savePolygon() {

            if (polygon != null) {
                var arr = new Array();
                var coords = polygon.geometry.getCoordinates()[0];
                for (var i = 0; i < coords.length; i++) {
                    arr.push({ Lat: coords[i][0], Lng: coords[i][1], Num: i });
                }
                $('#PointList').val(JSON.stringify(arr));


                setTimeout(function() {
                    if ($('#message').text().trim().length == 0) {
                        polygon.editor.stopDrawing();
                        zonesList.push({poly: polygon, id: 0});
                        polygon = null;
                        redrawSectors();
                    }

                }, 500);
            }
        }


        function editZone(id) {
            $.get('/Delivery/SectorEdit', { ShopID: $('#ShopID').val(), ID: id, Type : 2 }, function(d) {
                $('#EditCell').replaceWith(d);
                initColorPicker();
                for (var i = 0; i < zonesList.length; i++) {
                    if (zonesList[i].id == id) {
                        zonesList[i].poly.editor.startDrawing();
                        polygon = zonesList[i].poly;
                        break;
                    }
                }
            });
        }

        function deleteZone(id) {
            $.post('/Delivery/SectorDelete', { ID: id, ShopID: $('#ShopID').val(), Type : 2 }, function(d) {
                $('#EditCell').replaceWith(d);
                initColorPicker();
                redrawSectors();
            });
        }
    </script>

}
@if (!currentUser.AvailShopList.Any())
{
    <div class="row">
        <div class="col-lg-12">
            <section class="panel">
                <div class="panel-body">
                    <p>У вас не зарегистрировано магазинов в системе</p>
                </div>
            </section>
        </div>
    </div>
}

else if (helper.HasPermission(Permissions.DeliveryZones))
{
    @Html.Action("ShopSelectRequired", "Common")
    <div class="row">
        <div class="col-lg-4">
            <div id="EditCell">
                @Html.Action("SectorList", new { ShopID = ViewBag.ShopID, Type = 2 })
            </div>
        </div>
        <div class="col-lg-8">
            <section class="panel">
                @*<header class="panel-heading"><h3>Зоны доставки:</h3></header>*@
                <div class="panel-body">
                    <div id="map" style="width: 100%; height: 587px"></div>
                </div>
            </section>
        </div>
    </div>
}
