#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Trading.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="1gb_trading1")]
	public partial class DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLogAction(LogAction instance);
    partial void UpdateLogAction(LogAction instance);
    partial void DeleteLogAction(LogAction instance);
    partial void InsertLogEntry(LogEntry instance);
    partial void UpdateLogEntry(LogEntry instance);
    partial void DeleteLogEntry(LogEntry instance);
    partial void InsertLoginHistory(LoginHistory instance);
    partial void UpdateLoginHistory(LoginHistory instance);
    partial void DeleteLoginHistory(LoginHistory instance);
    partial void InsertManager(Manager instance);
    partial void UpdateManager(Manager instance);
    partial void DeleteManager(Manager instance);
    partial void InsertMark(Mark instance);
    partial void UpdateMark(Mark instance);
    partial void DeleteMark(Mark instance);
    partial void InsertPermissionGroup(PermissionGroup instance);
    partial void UpdatePermissionGroup(PermissionGroup instance);
    partial void DeletePermissionGroup(PermissionGroup instance);
    partial void InsertPermissionsForRole(PermissionsForRole instance);
    partial void UpdatePermissionsForRole(PermissionsForRole instance);
    partial void DeletePermissionsForRole(PermissionsForRole instance);
    partial void InsertShopManager(ShopManager instance);
    partial void UpdateShopManager(ShopManager instance);
    partial void DeleteShopManager(ShopManager instance);
    partial void InsertMembership(Membership instance);
    partial void UpdateMembership(Membership instance);
    partial void DeleteMembership(Membership instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUsersInRole(UsersInRole instance);
    partial void UpdateUsersInRole(UsersInRole instance);
    partial void DeleteUsersInRole(UsersInRole instance);
    partial void InsertUserAllowedRole(UserAllowedRole instance);
    partial void UpdateUserAllowedRole(UserAllowedRole instance);
    partial void DeleteUserAllowedRole(UserAllowedRole instance);
    partial void InsertTaxPlane(TaxPlane instance);
    partial void UpdateTaxPlane(TaxPlane instance);
    partial void DeleteTaxPlane(TaxPlane instance);
    partial void InsertShop(Shop instance);
    partial void UpdateShop(Shop instance);
    partial void DeleteShop(Shop instance);
    partial void InsertProductChar(ProductChar instance);
    partial void UpdateProductChar(ProductChar instance);
    partial void DeleteProductChar(ProductChar instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserPermission(UserPermission instance);
    partial void UpdateUserPermission(UserPermission instance);
    partial void DeleteUserPermission(UserPermission instance);
    partial void InsertOperatorShop(OperatorShop instance);
    partial void UpdateOperatorShop(OperatorShop instance);
    partial void DeleteOperatorShop(OperatorShop instance);
    partial void InsertShopProductChar(ShopProductChar instance);
    partial void UpdateShopProductChar(ShopProductChar instance);
    partial void DeleteShopProductChar(ShopProductChar instance);
    partial void InsertOrderChar(OrderChar instance);
    partial void UpdateOrderChar(OrderChar instance);
    partial void DeleteOrderChar(OrderChar instance);
    partial void InsertShopSetting(ShopSetting instance);
    partial void UpdateShopSetting(ShopSetting instance);
    partial void DeleteShopSetting(ShopSetting instance);
    partial void InsertConsumer(Consumer instance);
    partial void UpdateConsumer(Consumer instance);
    partial void DeleteConsumer(Consumer instance);
    partial void InsertMapPoint(MapPoint instance);
    partial void UpdateMapPoint(MapPoint instance);
    partial void DeleteMapPoint(MapPoint instance);
    partial void InsertMapCity(MapCity instance);
    partial void UpdateMapCity(MapCity instance);
    partial void DeleteMapCity(MapCity instance);
    partial void InsertMapCountry(MapCountry instance);
    partial void UpdateMapCountry(MapCountry instance);
    partial void DeleteMapCountry(MapCountry instance);
    partial void InsertMapRegion(MapRegion instance);
    partial void UpdateMapRegion(MapRegion instance);
    partial void DeleteMapRegion(MapRegion instance);
    partial void InsertGraphSerial(GraphSerial instance);
    partial void UpdateGraphSerial(GraphSerial instance);
    partial void DeleteGraphSerial(GraphSerial instance);
    partial void InsertGraphSerialsOrder(GraphSerialsOrder instance);
    partial void UpdateGraphSerialsOrder(GraphSerialsOrder instance);
    partial void DeleteGraphSerialsOrder(GraphSerialsOrder instance);
    partial void InsertGraphTypeFunc(GraphTypeFunc instance);
    partial void UpdateGraphTypeFunc(GraphTypeFunc instance);
    partial void DeleteGraphTypeFunc(GraphTypeFunc instance);
    partial void InsertGraphType(GraphType instance);
    partial void UpdateGraphType(GraphType instance);
    partial void DeleteGraphType(GraphType instance);
    partial void InsertGraph(Graph instance);
    partial void UpdateGraph(Graph instance);
    partial void DeleteGraph(Graph instance);
    partial void InsertGraphSerialsRel(GraphSerialsRel instance);
    partial void UpdateGraphSerialsRel(GraphSerialsRel instance);
    partial void DeleteGraphSerialsRel(GraphSerialsRel instance);
    partial void InsertContractor(Contractor instance);
    partial void UpdateContractor(Contractor instance);
    partial void DeleteContractor(Contractor instance);
    partial void InsertContractedOrder(ContractedOrder instance);
    partial void UpdateContractedOrder(ContractedOrder instance);
    partial void DeleteContractedOrder(ContractedOrder instance);
    partial void InsertStoredProduct(StoredProduct instance);
    partial void UpdateStoredProduct(StoredProduct instance);
    partial void DeleteStoredProduct(StoredProduct instance);
    partial void InsertShopProduct(ShopProduct instance);
    partial void UpdateShopProduct(ShopProduct instance);
    partial void DeleteShopProduct(ShopProduct instance);
    partial void InsertStoreProductRefilling(StoreProductRefilling instance);
    partial void UpdateStoreProductRefilling(StoreProductRefilling instance);
    partial void DeleteStoreProductRefilling(StoreProductRefilling instance);
    partial void InsertComplexProduct(ComplexProduct instance);
    partial void UpdateComplexProduct(ComplexProduct instance);
    partial void DeleteComplexProduct(ComplexProduct instance);
    partial void InsertComplexProductComponent(ComplexProductComponent instance);
    partial void UpdateComplexProductComponent(ComplexProductComponent instance);
    partial void DeleteComplexProductComponent(ComplexProductComponent instance);
    partial void InsertShopStore(ShopStore instance);
    partial void UpdateShopStore(ShopStore instance);
    partial void DeleteShopStore(ShopStore instance);
    partial void InsertStore(Store instance);
    partial void UpdateStore(Store instance);
    partial void DeleteStore(Store instance);
    partial void InsertPriceFormula(PriceFormula instance);
    partial void UpdatePriceFormula(PriceFormula instance);
    partial void DeletePriceFormula(PriceFormula instance);
    partial void InsertPriceGroup(PriceGroup instance);
    partial void UpdatePriceGroup(PriceGroup instance);
    partial void DeletePriceGroup(PriceGroup instance);
    partial void InsertWorkerGroupParticipant(WorkerGroupParticipant instance);
    partial void UpdateWorkerGroupParticipant(WorkerGroupParticipant instance);
    partial void DeleteWorkerGroupParticipant(WorkerGroupParticipant instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertMailingReplacement(MailingReplacement instance);
    partial void UpdateMailingReplacement(MailingReplacement instance);
    partial void DeleteMailingReplacement(MailingReplacement instance);
    partial void InsertSiteSetting(SiteSetting instance);
    partial void UpdateSiteSetting(SiteSetting instance);
    partial void DeleteSiteSetting(SiteSetting instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertMailingList(MailingList instance);
    partial void UpdateMailingList(MailingList instance);
    partial void DeleteMailingList(MailingList instance);
    partial void InsertDeliveryAddress(DeliveryAddress instance);
    partial void UpdateDeliveryAddress(DeliveryAddress instance);
    partial void DeleteDeliveryAddress(DeliveryAddress instance);
    partial void InsertMapSector(MapSector instance);
    partial void UpdateMapSector(MapSector instance);
    partial void DeleteMapSector(MapSector instance);
    partial void InsertWorkerGroup(WorkerGroup instance);
    partial void UpdateWorkerGroup(WorkerGroup instance);
    partial void DeleteWorkerGroup(WorkerGroup instance);
    partial void InsertMapSectorCar(MapSectorCar instance);
    partial void UpdateMapSectorCar(MapSectorCar instance);
    partial void DeleteMapSectorCar(MapSectorCar instance);
    partial void InsertMapSectorCourier(MapSectorCourier instance);
    partial void UpdateMapSectorCourier(MapSectorCourier instance);
    partial void DeleteMapSectorCourier(MapSectorCourier instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertWorker(Worker instance);
    partial void UpdateWorker(Worker instance);
    partial void DeleteWorker(Worker instance);
    partial void InsertDeliveryListOrder(DeliveryListOrder instance);
    partial void UpdateDeliveryListOrder(DeliveryListOrder instance);
    partial void DeleteDeliveryListOrder(DeliveryListOrder instance);
    partial void InsertOrderedProduct(OrderedProduct instance);
    partial void UpdateOrderedProduct(OrderedProduct instance);
    partial void DeleteOrderedProduct(OrderedProduct instance);
    partial void InsertDeliveryList(DeliveryList instance);
    partial void UpdateDeliveryList(DeliveryList instance);
    partial void DeleteDeliveryList(DeliveryList instance);
    partial void InsertGraphConstructor(GraphConstructor instance);
    partial void UpdateGraphConstructor(GraphConstructor instance);
    partial void DeleteGraphConstructor(GraphConstructor instance);
    #endregion
		
		public DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TradingConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LogAction> LogActions
		{
			get
			{
				return this.GetTable<LogAction>();
			}
		}
		
		public System.Data.Linq.Table<LogEntry> LogEntries
		{
			get
			{
				return this.GetTable<LogEntry>();
			}
		}
		
		public System.Data.Linq.Table<LoginHistory> LoginHistories
		{
			get
			{
				return this.GetTable<LoginHistory>();
			}
		}
		
		public System.Data.Linq.Table<Manager> Managers
		{
			get
			{
				return this.GetTable<Manager>();
			}
		}
		
		public System.Data.Linq.Table<Mark> Marks
		{
			get
			{
				return this.GetTable<Mark>();
			}
		}
		
		public System.Data.Linq.Table<PermissionGroup> PermissionGroups
		{
			get
			{
				return this.GetTable<PermissionGroup>();
			}
		}
		
		public System.Data.Linq.Table<PermissionsForRole> PermissionsForRoles
		{
			get
			{
				return this.GetTable<PermissionsForRole>();
			}
		}
		
		public System.Data.Linq.Table<ShopManager> ShopManagers
		{
			get
			{
				return this.GetTable<ShopManager>();
			}
		}
		
		public System.Data.Linq.Table<Membership> Memberships
		{
			get
			{
				return this.GetTable<Membership>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<UsersInRole> UsersInRoles
		{
			get
			{
				return this.GetTable<UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<UserAllowedRole> UserAllowedRoles
		{
			get
			{
				return this.GetTable<UserAllowedRole>();
			}
		}
		
		public System.Data.Linq.Table<TaxPlane> TaxPlanes
		{
			get
			{
				return this.GetTable<TaxPlane>();
			}
		}
		
		public System.Data.Linq.Table<Shop> Shops
		{
			get
			{
				return this.GetTable<Shop>();
			}
		}
		
		public System.Data.Linq.Table<ProductChar> ProductChars
		{
			get
			{
				return this.GetTable<ProductChar>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserPermission> UserPermissions
		{
			get
			{
				return this.GetTable<UserPermission>();
			}
		}
		
		public System.Data.Linq.Table<OperatorShop> OperatorShops
		{
			get
			{
				return this.GetTable<OperatorShop>();
			}
		}
		
		public System.Data.Linq.Table<ShopProductChar> ShopProductChars
		{
			get
			{
				return this.GetTable<ShopProductChar>();
			}
		}
		
		public System.Data.Linq.Table<OrderChar> OrderChars
		{
			get
			{
				return this.GetTable<OrderChar>();
			}
		}
		
		public System.Data.Linq.Table<ShopSetting> ShopSettings
		{
			get
			{
				return this.GetTable<ShopSetting>();
			}
		}
		
		public System.Data.Linq.Table<Consumer> Consumers
		{
			get
			{
				return this.GetTable<Consumer>();
			}
		}
		
		public System.Data.Linq.Table<MapPoint> MapPoints
		{
			get
			{
				return this.GetTable<MapPoint>();
			}
		}
		
		public System.Data.Linq.Table<MapCity> MapCities
		{
			get
			{
				return this.GetTable<MapCity>();
			}
		}
		
		public System.Data.Linq.Table<MapCountry> MapCountries
		{
			get
			{
				return this.GetTable<MapCountry>();
			}
		}
		
		public System.Data.Linq.Table<MapRegion> MapRegions
		{
			get
			{
				return this.GetTable<MapRegion>();
			}
		}
		
		public System.Data.Linq.Table<GraphSerial> GraphSerials
		{
			get
			{
				return this.GetTable<GraphSerial>();
			}
		}
		
		public System.Data.Linq.Table<GraphSerialsOrder> GraphSerialsOrders
		{
			get
			{
				return this.GetTable<GraphSerialsOrder>();
			}
		}
		
		public System.Data.Linq.Table<GraphTypeFunc> GraphTypeFuncs
		{
			get
			{
				return this.GetTable<GraphTypeFunc>();
			}
		}
		
		public System.Data.Linq.Table<GraphType> GraphTypes
		{
			get
			{
				return this.GetTable<GraphType>();
			}
		}
		
		public System.Data.Linq.Table<Graph> Graphs
		{
			get
			{
				return this.GetTable<Graph>();
			}
		}
		
		public System.Data.Linq.Table<GraphSerialsRel> GraphSerialsRels
		{
			get
			{
				return this.GetTable<GraphSerialsRel>();
			}
		}
		
		public System.Data.Linq.Table<Contractor> Contractors
		{
			get
			{
				return this.GetTable<Contractor>();
			}
		}
		
		public System.Data.Linq.Table<ContractedOrder> ContractedOrders
		{
			get
			{
				return this.GetTable<ContractedOrder>();
			}
		}
		
		public System.Data.Linq.Table<StoredProduct> StoredProducts
		{
			get
			{
				return this.GetTable<StoredProduct>();
			}
		}
		
		public System.Data.Linq.Table<ShopProduct> ShopProducts
		{
			get
			{
				return this.GetTable<ShopProduct>();
			}
		}
		
		public System.Data.Linq.Table<StoreProductRefilling> StoreProductRefillings
		{
			get
			{
				return this.GetTable<StoreProductRefilling>();
			}
		}
		
		public System.Data.Linq.Table<ComplexProduct> ComplexProducts
		{
			get
			{
				return this.GetTable<ComplexProduct>();
			}
		}
		
		public System.Data.Linq.Table<ComplexProductComponent> ComplexProductComponents
		{
			get
			{
				return this.GetTable<ComplexProductComponent>();
			}
		}
		
		public System.Data.Linq.Table<ShopStore> ShopStores
		{
			get
			{
				return this.GetTable<ShopStore>();
			}
		}
		
		public System.Data.Linq.Table<Store> Stores
		{
			get
			{
				return this.GetTable<Store>();
			}
		}
		
		public System.Data.Linq.Table<PriceFormula> PriceFormulas
		{
			get
			{
				return this.GetTable<PriceFormula>();
			}
		}
		
		public System.Data.Linq.Table<PriceGroup> PriceGroups
		{
			get
			{
				return this.GetTable<PriceGroup>();
			}
		}
		
		public System.Data.Linq.Table<WorkerGroupParticipant> WorkerGroupParticipants
		{
			get
			{
				return this.GetTable<WorkerGroupParticipant>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<MailingReplacement> MailingReplacements
		{
			get
			{
				return this.GetTable<MailingReplacement>();
			}
		}
		
		public System.Data.Linq.Table<SiteSetting> SiteSettings
		{
			get
			{
				return this.GetTable<SiteSetting>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<MailingList> MailingLists
		{
			get
			{
				return this.GetTable<MailingList>();
			}
		}
		
		public System.Data.Linq.Table<DeliveryAddress> DeliveryAddresses
		{
			get
			{
				return this.GetTable<DeliveryAddress>();
			}
		}
		
		public System.Data.Linq.Table<MapSector> MapSectors
		{
			get
			{
				return this.GetTable<MapSector>();
			}
		}
		
		public System.Data.Linq.Table<WorkerGroup> WorkerGroups
		{
			get
			{
				return this.GetTable<WorkerGroup>();
			}
		}
		
		public System.Data.Linq.Table<MapSectorCar> MapSectorCars
		{
			get
			{
				return this.GetTable<MapSectorCar>();
			}
		}
		
		public System.Data.Linq.Table<MapSectorCourier> MapSectorCouriers
		{
			get
			{
				return this.GetTable<MapSectorCourier>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<Worker> Workers
		{
			get
			{
				return this.GetTable<Worker>();
			}
		}
		
		public System.Data.Linq.Table<DeliveryListOrder> DeliveryListOrders
		{
			get
			{
				return this.GetTable<DeliveryListOrder>();
			}
		}
		
		public System.Data.Linq.Table<OrderedProduct> OrderedProducts
		{
			get
			{
				return this.GetTable<OrderedProduct>();
			}
		}
		
		public System.Data.Linq.Table<DeliveryList> DeliveryLists
		{
			get
			{
				return this.GetTable<DeliveryList>();
			}
		}
		
		public System.Data.Linq.Table<GraphConstructor> GraphConstructors
		{
			get
			{
				return this.GetTable<GraphConstructor>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogAction")]
	public partial class LogAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<LogEntry> _LogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public LogAction()
		{
			this._LogEntries = new EntitySet<LogEntry>(new Action<LogEntry>(this.attach_LogEntries), new Action<LogEntry>(this.detach_LogEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogAction_LogEntry", Storage="_LogEntries", ThisKey="ID", OtherKey="ActionID")]
		public EntitySet<LogEntry> LogEntries
		{
			get
			{
				return this._LogEntries;
			}
			set
			{
				this._LogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.LogAction = this;
		}
		
		private void detach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.LogAction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogEntry")]
	public partial class LogEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _ActionDate;
		
		private int _UserID;
		
		private int _ActionID;
		
		private string _Description;
		
		private EntityRef<LogAction> _LogAction;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActionDateChanging(System.DateTime value);
    partial void OnActionDateChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public LogEntry()
		{
			this._LogAction = default(EntityRef<LogAction>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionDate", DbType="DateTime NOT NULL")]
		public System.DateTime ActionDate
		{
			get
			{
				return this._ActionDate;
			}
			set
			{
				if ((this._ActionDate != value))
				{
					this.OnActionDateChanging(value);
					this.SendPropertyChanging();
					this._ActionDate = value;
					this.SendPropertyChanged("ActionDate");
					this.OnActionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="Int NOT NULL")]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._LogAction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogAction_LogEntry", Storage="_LogAction", ThisKey="ActionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LogAction LogAction
		{
			get
			{
				return this._LogAction.Entity;
			}
			set
			{
				LogAction previousValue = this._LogAction.Entity;
				if (((previousValue != value) 
							|| (this._LogAction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogAction.Entity = null;
						previousValue.LogEntries.Remove(this);
					}
					this._LogAction.Entity = value;
					if ((value != null))
					{
						value.LogEntries.Add(this);
						this._ActionID = value.ID;
					}
					else
					{
						this._ActionID = default(int);
					}
					this.SendPropertyChanged("LogAction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LogEntry", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LogEntries.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LogEntries.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoginHistory")]
	public partial class LoginHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.DateTime _LoginDate;
		
		private long _IPAddress;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLoginDateChanging(System.DateTime value);
    partial void OnLoginDateChanged();
    partial void OnIPAddressChanging(long value);
    partial void OnIPAddressChanged();
    #endregion
		
		public LoginHistory()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LoginDate
		{
			get
			{
				return this._LoginDate;
			}
			set
			{
				if ((this._LoginDate != value))
				{
					this.OnLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LoginDate = value;
					this.SendPropertyChanged("LoginDate");
					this.OnLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="BigInt NOT NULL")]
		public long IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LoginHistory", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LoginHistories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LoginHistories.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Managers")]
	public partial class Manager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ManagerUserID;
		
		private int _ShopOwnerID;
		
		private int _ID;
		
		private EntitySet<ShopManager> _ShopManagers;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _OwnerUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManagerUserIDChanging(int value);
    partial void OnManagerUserIDChanged();
    partial void OnShopOwnerIDChanging(int value);
    partial void OnShopOwnerIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public Manager()
		{
			this._ShopManagers = new EntitySet<ShopManager>(new Action<ShopManager>(this.attach_ShopManagers), new Action<ShopManager>(this.detach_ShopManagers));
			this._User = default(EntityRef<User>);
			this._OwnerUser = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerUserID", DbType="Int NOT NULL")]
		public int ManagerUserID
		{
			get
			{
				return this._ManagerUserID;
			}
			set
			{
				if ((this._ManagerUserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerUserIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerUserID = value;
					this.SendPropertyChanged("ManagerUserID");
					this.OnManagerUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopOwnerID", DbType="Int NOT NULL")]
		public int ShopOwnerID
		{
			get
			{
				return this._ShopOwnerID;
			}
			set
			{
				if ((this._ShopOwnerID != value))
				{
					if (this._OwnerUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._ShopOwnerID = value;
					this.SendPropertyChanged("ShopOwnerID");
					this.OnShopOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manager_ShopManager", Storage="_ShopManagers", ThisKey="ID", OtherKey="ManagerID")]
		public EntitySet<ShopManager> ShopManagers
		{
			get
			{
				return this._ShopManagers;
			}
			set
			{
				this._ShopManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Manager", Storage="_User", ThisKey="ManagerUserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ManagerProfiles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ManagerProfiles.Add(this);
						this._ManagerUserID = value.ID;
					}
					else
					{
						this._ManagerUserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Manager1", Storage="_OwnerUser", ThisKey="ShopOwnerID", OtherKey="ID", IsForeignKey=true)]
		public User OwnerUser
		{
			get
			{
				return this._OwnerUser.Entity;
			}
			set
			{
				User previousValue = this._OwnerUser.Entity;
				if (((previousValue != value) 
							|| (this._OwnerUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerUser.Entity = null;
						previousValue.MyManagers.Remove(this);
					}
					this._OwnerUser.Entity = value;
					if ((value != null))
					{
						value.MyManagers.Add(this);
						this._ShopOwnerID = value.ID;
					}
					else
					{
						this._ShopOwnerID = default(int);
					}
					this.SendPropertyChanged("OwnerUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShopManagers(ShopManager entity)
		{
			this.SendPropertyChanging();
			entity.Manager = this;
		}
		
		private void detach_ShopManagers(ShopManager entity)
		{
			this.SendPropertyChanging();
			entity.Manager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Marks")]
	public partial class Mark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Quality;
		
		private int _Price;
		
		private int _Operator;
		
		private int _Delivery;
		
		private System.DateTime _MarkDate;
		
		private int _OrderID;
		
		private int _MarkAuthorID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQualityChanging(int value);
    partial void OnQualityChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnOperatorChanging(int value);
    partial void OnOperatorChanged();
    partial void OnDeliveryChanging(int value);
    partial void OnDeliveryChanged();
    partial void OnMarkDateChanging(System.DateTime value);
    partial void OnMarkDateChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnMarkAuthorIDChanging(int value);
    partial void OnMarkAuthorIDChanged();
    #endregion
		
		public Mark()
		{
			this._User = default(EntityRef<User>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quality", DbType="Int NOT NULL")]
		public int Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this.OnQualityChanging(value);
					this.SendPropertyChanging();
					this._Quality = value;
					this.SendPropertyChanged("Quality");
					this.OnQualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operator", DbType="Int NOT NULL")]
		public int Operator
		{
			get
			{
				return this._Operator;
			}
			set
			{
				if ((this._Operator != value))
				{
					this.OnOperatorChanging(value);
					this.SendPropertyChanging();
					this._Operator = value;
					this.SendPropertyChanged("Operator");
					this.OnOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delivery", DbType="Int NOT NULL")]
		public int Delivery
		{
			get
			{
				return this._Delivery;
			}
			set
			{
				if ((this._Delivery != value))
				{
					this.OnDeliveryChanging(value);
					this.SendPropertyChanging();
					this._Delivery = value;
					this.SendPropertyChanged("Delivery");
					this.OnDeliveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkDate", DbType="DateTime NOT NULL")]
		public System.DateTime MarkDate
		{
			get
			{
				return this._MarkDate;
			}
			set
			{
				if ((this._MarkDate != value))
				{
					this.OnMarkDateChanging(value);
					this.SendPropertyChanging();
					this._MarkDate = value;
					this.SendPropertyChanged("MarkDate");
					this.OnMarkDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkAuthorID", DbType="Int NOT NULL")]
		public int MarkAuthorID
		{
			get
			{
				return this._MarkAuthorID;
			}
			set
			{
				if ((this._MarkAuthorID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._MarkAuthorID = value;
					this.SendPropertyChanged("MarkAuthorID");
					this.OnMarkAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Mark", Storage="_User", ThisKey="MarkAuthorID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Marks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Marks.Add(this);
						this._MarkAuthorID = value.ID;
					}
					else
					{
						this._MarkAuthorID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Mark", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Marks.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Marks.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissionGroups")]
	public partial class PermissionGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Permission> _Permissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PermissionGroup()
		{
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermissionGroup_Permission", Storage="_Permissions", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionGroup = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissionsForRoles")]
	public partial class PermissionsForRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RoleID;
		
		private int _PermissionID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Permission> _Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    #endregion
		
		public PermissionsForRole()
		{
			this._Role = default(EntityRef<Role>);
			this._Permission = default(EntityRef<Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL")]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_PermissionsForRole", Storage="_Role", ThisKey="RoleID", OtherKey="RoleId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.PermissionsForRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.PermissionsForRoles.Add(this);
						this._RoleID = value.RoleId;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_PermissionsForRole", Storage="_Permission", ThisKey="PermissionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.PermissionsForRoles.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.PermissionsForRoles.Add(this);
						this._PermissionID = value.ID;
					}
					else
					{
						this._PermissionID = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShopManagers")]
	public partial class ShopManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ManagerID;
		
		private System.Nullable<int> _ShopID;
		
		private EntityRef<Manager> _Manager;
		
		private EntityRef<Shop> _Shop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnManagerIDChanging(int value);
    partial void OnManagerIDChanged();
    partial void OnShopIDChanging(System.Nullable<int> value);
    partial void OnShopIDChanged();
    #endregion
		
		public ShopManager()
		{
			this._Manager = default(EntityRef<Manager>);
			this._Shop = default(EntityRef<Shop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerID", DbType="Int NOT NULL")]
		public int ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					if (this._Manager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerID = value;
					this.SendPropertyChanged("ManagerID");
					this.OnManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int")]
		public System.Nullable<int> ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manager_ShopManager", Storage="_Manager", ThisKey="ManagerID", OtherKey="ID", IsForeignKey=true)]
		public Manager Manager
		{
			get
			{
				return this._Manager.Entity;
			}
			set
			{
				Manager previousValue = this._Manager.Entity;
				if (((previousValue != value) 
							|| (this._Manager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manager.Entity = null;
						previousValue.ShopManagers.Remove(this);
					}
					this._Manager.Entity = value;
					if ((value != null))
					{
						value.ShopManagers.Add(this);
						this._ManagerID = value.ID;
					}
					else
					{
						this._ManagerID = default(int);
					}
					this.SendPropertyChanged("Manager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopManager", Storage="_Shop", ThisKey="ShopID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.ShopManagers.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.ShopManagers.Add(this);
						this._ShopID = value.ID;
					}
					else
					{
						this._ShopID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_Membership")]
	public partial class Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _ConfirmationToken;
		
		private System.Nullable<bool> _IsConfirmed;
		
		private System.Nullable<System.DateTime> _LastPasswordFailureDate;
		
		private int _PasswordFailuresSinceLastSuccess;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _PasswordChangedDate;
		
		private string _PasswordSalt;
		
		private string _PasswordVerificationToken;
		
		private System.Nullable<System.DateTime> _PasswordVerificationTokenExpirationDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnConfirmationTokenChanging(string value);
    partial void OnConfirmationTokenChanged();
    partial void OnIsConfirmedChanging(System.Nullable<bool> value);
    partial void OnIsConfirmedChanged();
    partial void OnLastPasswordFailureDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPasswordFailureDateChanged();
    partial void OnPasswordFailuresSinceLastSuccessChanging(int value);
    partial void OnPasswordFailuresSinceLastSuccessChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordChangedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordChangedDateChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnPasswordVerificationTokenChanging(string value);
    partial void OnPasswordVerificationTokenChanged();
    partial void OnPasswordVerificationTokenExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordVerificationTokenExpirationDateChanged();
    #endregion
		
		public Membership()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmationToken", DbType="NVarChar(128)")]
		public string ConfirmationToken
		{
			get
			{
				return this._ConfirmationToken;
			}
			set
			{
				if ((this._ConfirmationToken != value))
				{
					this.OnConfirmationTokenChanging(value);
					this.SendPropertyChanging();
					this._ConfirmationToken = value;
					this.SendPropertyChanged("ConfirmationToken");
					this.OnConfirmationTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsConfirmed", DbType="Bit")]
		public System.Nullable<bool> IsConfirmed
		{
			get
			{
				return this._IsConfirmed;
			}
			set
			{
				if ((this._IsConfirmed != value))
				{
					this.OnIsConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsConfirmed = value;
					this.SendPropertyChanged("IsConfirmed");
					this.OnIsConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordFailureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastPasswordFailureDate
		{
			get
			{
				return this._LastPasswordFailureDate;
			}
			set
			{
				if ((this._LastPasswordFailureDate != value))
				{
					this.OnLastPasswordFailureDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordFailureDate = value;
					this.SendPropertyChanged("LastPasswordFailureDate");
					this.OnLastPasswordFailureDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFailuresSinceLastSuccess", DbType="Int NOT NULL")]
		public int PasswordFailuresSinceLastSuccess
		{
			get
			{
				return this._PasswordFailuresSinceLastSuccess;
			}
			set
			{
				if ((this._PasswordFailuresSinceLastSuccess != value))
				{
					this.OnPasswordFailuresSinceLastSuccessChanging(value);
					this.SendPropertyChanging();
					this._PasswordFailuresSinceLastSuccess = value;
					this.SendPropertyChanged("PasswordFailuresSinceLastSuccess");
					this.OnPasswordFailuresSinceLastSuccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordChangedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PasswordChangedDate
		{
			get
			{
				return this._PasswordChangedDate;
			}
			set
			{
				if ((this._PasswordChangedDate != value))
				{
					this.OnPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordChangedDate = value;
					this.SendPropertyChanged("PasswordChangedDate");
					this.OnPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordVerificationToken", DbType="NVarChar(128)")]
		public string PasswordVerificationToken
		{
			get
			{
				return this._PasswordVerificationToken;
			}
			set
			{
				if ((this._PasswordVerificationToken != value))
				{
					this.OnPasswordVerificationTokenChanging(value);
					this.SendPropertyChanging();
					this._PasswordVerificationToken = value;
					this.SendPropertyChanged("PasswordVerificationToken");
					this.OnPasswordVerificationTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordVerificationTokenExpirationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PasswordVerificationTokenExpirationDate
		{
			get
			{
				return this._PasswordVerificationTokenExpirationDate;
			}
			set
			{
				if ((this._PasswordVerificationTokenExpirationDate != value))
				{
					this.OnPasswordVerificationTokenExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordVerificationTokenExpirationDate = value;
					this.SendPropertyChanged("PasswordVerificationTokenExpirationDate");
					this.OnPasswordVerificationTokenExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Membership", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Membership = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Membership = this;
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private string _RoleDescription;
		
		private EntitySet<PermissionsForRole> _PermissionsForRoles;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
		private EntitySet<UserAllowedRole> _UserAllowedRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnRoleDescriptionChanging(string value);
    partial void OnRoleDescriptionChanged();
    #endregion
		
		public Role()
		{
			this._PermissionsForRoles = new EntitySet<PermissionsForRole>(new Action<PermissionsForRole>(this.attach_PermissionsForRoles), new Action<PermissionsForRole>(this.detach_PermissionsForRoles));
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			this._UserAllowedRoles = new EntitySet<UserAllowedRole>(new Action<UserAllowedRole>(this.attach_UserAllowedRoles), new Action<UserAllowedRole>(this.detach_UserAllowedRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleDescription", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleDescription
		{
			get
			{
				return this._RoleDescription;
			}
			set
			{
				if ((this._RoleDescription != value))
				{
					this.OnRoleDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoleDescription = value;
					this.SendPropertyChanged("RoleDescription");
					this.OnRoleDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_PermissionsForRole", Storage="_PermissionsForRoles", ThisKey="RoleId", OtherKey="RoleID")]
		public EntitySet<PermissionsForRole> PermissionsForRoles
		{
			get
			{
				return this._PermissionsForRoles;
			}
			set
			{
				this._PermissionsForRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UsersInRole", Storage="_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserAllowedRole", Storage="_UserAllowedRoles", ThisKey="RoleId", OtherKey="RoleID")]
		public EntitySet<UserAllowedRole> UserAllowedRoles
		{
			get
			{
				return this._UserAllowedRoles;
			}
			set
			{
				this._UserAllowedRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermissionsForRoles(PermissionsForRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_PermissionsForRoles(PermissionsForRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_UserAllowedRoles(UserAllowedRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserAllowedRoles(UserAllowedRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_UsersInRoles")]
	public partial class UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public UsersInRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UsersInRole", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersInRole", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAllowedRoles")]
	public partial class UserAllowedRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RoleID;
		
		private int _AllowedRoleID;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnAllowedRoleIDChanging(int value);
    partial void OnAllowedRoleIDChanged();
    #endregion
		
		public UserAllowedRole()
		{
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowedRoleID", DbType="Int NOT NULL")]
		public int AllowedRoleID
		{
			get
			{
				return this._AllowedRoleID;
			}
			set
			{
				if ((this._AllowedRoleID != value))
				{
					this.OnAllowedRoleIDChanging(value);
					this.SendPropertyChanging();
					this._AllowedRoleID = value;
					this.SendPropertyChanged("AllowedRoleID");
					this.OnAllowedRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserAllowedRole", Storage="_Role", ThisKey="RoleID", OtherKey="RoleId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserAllowedRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserAllowedRoles.Add(this);
						this._RoleID = value.RoleId;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaxPlanes")]
	public partial class TaxPlane : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private decimal _MonthCost;
		
		private string _Description;
		
		private EntitySet<Shop> _Shops;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMonthCostChanging(decimal value);
    partial void OnMonthCostChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TaxPlane()
		{
			this._Shops = new EntitySet<Shop>(new Action<Shop>(this.attach_Shops), new Action<Shop>(this.detach_Shops));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthCost", DbType="Decimal(18,2) NOT NULL")]
		public decimal MonthCost
		{
			get
			{
				return this._MonthCost;
			}
			set
			{
				if ((this._MonthCost != value))
				{
					this.OnMonthCostChanging(value);
					this.SendPropertyChanging();
					this._MonthCost = value;
					this.SendPropertyChanged("MonthCost");
					this.OnMonthCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxPlane_Shop", Storage="_Shops", ThisKey="ID", OtherKey="TaxPlanID")]
		public EntitySet<Shop> Shops
		{
			get
			{
				return this._Shops;
			}
			set
			{
				this._Shops.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shops(Shop entity)
		{
			this.SendPropertyChanging();
			entity.TaxPlane = this;
		}
		
		private void detach_Shops(Shop entity)
		{
			this.SendPropertyChanging();
			entity.TaxPlane = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shops")]
	public partial class Shop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _Owner;
		
		private System.Nullable<int> _TaxPlanID;
		
		private string _Link;
		
		private System.DateTime _CreateDate;
		
		private EntitySet<ShopManager> _ShopManagers;
		
		private EntitySet<OperatorShop> _OperatorShops;
		
		private EntitySet<ShopProductChar> _ShopProductChars;
		
		private EntitySet<ShopSetting> _ShopSettings;
		
		private EntitySet<Contractor> _Contractors;
		
		private EntitySet<ShopProduct> _ShopProducts;
		
		private EntitySet<ShopStore> _ShopStores;
		
		private EntitySet<MapSector> _MapSectors;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<DeliveryList> _DeliveryLists;
		
		private EntitySet<GraphConstructor> _GraphConstructors;
		
		private EntityRef<TaxPlane> _TaxPlane;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOwnerChanging(int value);
    partial void OnOwnerChanged();
    partial void OnTaxPlanIDChanging(System.Nullable<int> value);
    partial void OnTaxPlanIDChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Shop()
		{
			this._ShopManagers = new EntitySet<ShopManager>(new Action<ShopManager>(this.attach_ShopManagers), new Action<ShopManager>(this.detach_ShopManagers));
			this._OperatorShops = new EntitySet<OperatorShop>(new Action<OperatorShop>(this.attach_OperatorShops), new Action<OperatorShop>(this.detach_OperatorShops));
			this._ShopProductChars = new EntitySet<ShopProductChar>(new Action<ShopProductChar>(this.attach_ShopProductChars), new Action<ShopProductChar>(this.detach_ShopProductChars));
			this._ShopSettings = new EntitySet<ShopSetting>(new Action<ShopSetting>(this.attach_ShopSettings), new Action<ShopSetting>(this.detach_ShopSettings));
			this._Contractors = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractors), new Action<Contractor>(this.detach_Contractors));
			this._ShopProducts = new EntitySet<ShopProduct>(new Action<ShopProduct>(this.attach_ShopProducts), new Action<ShopProduct>(this.detach_ShopProducts));
			this._ShopStores = new EntitySet<ShopStore>(new Action<ShopStore>(this.attach_ShopStores), new Action<ShopStore>(this.detach_ShopStores));
			this._MapSectors = new EntitySet<MapSector>(new Action<MapSector>(this.attach_MapSectors), new Action<MapSector>(this.detach_MapSectors));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._DeliveryLists = new EntitySet<DeliveryList>(new Action<DeliveryList>(this.attach_DeliveryLists), new Action<DeliveryList>(this.detach_DeliveryLists));
			this._GraphConstructors = new EntitySet<GraphConstructor>(new Action<GraphConstructor>(this.attach_GraphConstructors), new Action<GraphConstructor>(this.detach_GraphConstructors));
			this._TaxPlane = default(EntityRef<TaxPlane>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owner", DbType="Int NOT NULL")]
		public int Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxPlanID", DbType="Int")]
		public System.Nullable<int> TaxPlanID
		{
			get
			{
				return this._TaxPlanID;
			}
			set
			{
				if ((this._TaxPlanID != value))
				{
					if (this._TaxPlane.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaxPlanIDChanging(value);
					this.SendPropertyChanging();
					this._TaxPlanID = value;
					this.SendPropertyChanged("TaxPlanID");
					this.OnTaxPlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(200)")]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopManager", Storage="_ShopManagers", ThisKey="ID", OtherKey="ShopID")]
		public EntitySet<ShopManager> ShopManagers
		{
			get
			{
				return this._ShopManagers;
			}
			set
			{
				this._ShopManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_OperatorShop", Storage="_OperatorShops", ThisKey="ID", OtherKey="ShopID")]
		public EntitySet<OperatorShop> OperatorShops
		{
			get
			{
				return this._OperatorShops;
			}
			set
			{
				this._OperatorShops.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopProductChar", Storage="_ShopProductChars", ThisKey="ID", OtherKey="ShopID")]
		public EntitySet<ShopProductChar> ShopProductChars
		{
			get
			{
				return this._ShopProductChars;
			}
			set
			{
				this._ShopProductChars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopSetting", Storage="_ShopSettings", ThisKey="ID", OtherKey="ShopID")]
		public EntitySet<ShopSetting> ShopSettings
		{
			get
			{
				return this._ShopSettings;
			}
			set
			{
				this._ShopSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_Contractor", Storage="_Contractors", ThisKey="ID", OtherKey="ShopID")]
		public EntitySet<Contractor> Contractors
		{
			get
			{
				return this._Contractors;
			}
			set
			{
				this._Contractors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopProduct", Storage="_ShopProducts", ThisKey="ID", OtherKey="ShopID")]
		public EntitySet<ShopProduct> ShopProducts
		{
			get
			{
				return this._ShopProducts;
			}
			set
			{
				this._ShopProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopStore", Storage="_ShopStores", ThisKey="ID", OtherKey="ShopID")]
		public EntitySet<ShopStore> ShopStores
		{
			get
			{
				return this._ShopStores;
			}
			set
			{
				this._ShopStores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_MapSector", Storage="_MapSectors", ThisKey="ID", OtherKey="ShopID")]
		public EntitySet<MapSector> MapSectors
		{
			get
			{
				return this._MapSectors;
			}
			set
			{
				this._MapSectors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_Order", Storage="_Orders", ThisKey="ID", OtherKey="ShopID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_DeliveryList", Storage="_DeliveryLists", ThisKey="ID", OtherKey="ShopID")]
		public EntitySet<DeliveryList> DeliveryLists
		{
			get
			{
				return this._DeliveryLists;
			}
			set
			{
				this._DeliveryLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_GraphConstructor", Storage="_GraphConstructors", ThisKey="ID", OtherKey="ShopID")]
		public EntitySet<GraphConstructor> GraphConstructors
		{
			get
			{
				return this._GraphConstructors;
			}
			set
			{
				this._GraphConstructors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxPlane_Shop", Storage="_TaxPlane", ThisKey="TaxPlanID", OtherKey="ID", IsForeignKey=true)]
		public TaxPlane TaxPlane
		{
			get
			{
				return this._TaxPlane.Entity;
			}
			set
			{
				TaxPlane previousValue = this._TaxPlane.Entity;
				if (((previousValue != value) 
							|| (this._TaxPlane.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaxPlane.Entity = null;
						previousValue.Shops.Remove(this);
					}
					this._TaxPlane.Entity = value;
					if ((value != null))
					{
						value.Shops.Add(this);
						this._TaxPlanID = value.ID;
					}
					else
					{
						this._TaxPlanID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TaxPlane");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Shop", Storage="_User", ThisKey="Owner", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Shops.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Shops.Add(this);
						this._Owner = value.ID;
					}
					else
					{
						this._Owner = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShopManagers(ShopManager entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_ShopManagers(ShopManager entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
		
		private void attach_OperatorShops(OperatorShop entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_OperatorShops(OperatorShop entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
		
		private void attach_ShopProductChars(ShopProductChar entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_ShopProductChars(ShopProductChar entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
		
		private void attach_ShopSettings(ShopSetting entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_ShopSettings(ShopSetting entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
		
		private void attach_Contractors(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_Contractors(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
		
		private void attach_ShopProducts(ShopProduct entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_ShopProducts(ShopProduct entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
		
		private void attach_ShopStores(ShopStore entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_ShopStores(ShopStore entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
		
		private void attach_MapSectors(MapSector entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_MapSectors(MapSector entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
		
		private void attach_DeliveryLists(DeliveryList entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_DeliveryLists(DeliveryList entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
		
		private void attach_GraphConstructors(GraphConstructor entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_GraphConstructors(GraphConstructor entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductChars")]
	public partial class ProductChar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _OrderedProductID;
		
		private string _Value;
		
		private EntityRef<OrderedProduct> _OrderedProduct;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderedProductIDChanging(int value);
    partial void OnOrderedProductIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ProductChar()
		{
			this._OrderedProduct = default(EntityRef<OrderedProduct>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderedProductID", DbType="Int NOT NULL")]
		public int OrderedProductID
		{
			get
			{
				return this._OrderedProductID;
			}
			set
			{
				if ((this._OrderedProductID != value))
				{
					if (this._OrderedProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderedProductIDChanging(value);
					this.SendPropertyChanging();
					this._OrderedProductID = value;
					this.SendPropertyChanged("OrderedProductID");
					this.OnOrderedProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(200)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderedProduct_ProductChar", Storage="_OrderedProduct", ThisKey="OrderedProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public OrderedProduct OrderedProduct
		{
			get
			{
				return this._OrderedProduct.Entity;
			}
			set
			{
				OrderedProduct previousValue = this._OrderedProduct.Entity;
				if (((previousValue != value) 
							|| (this._OrderedProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderedProduct.Entity = null;
						previousValue.ProductChars.Remove(this);
					}
					this._OrderedProduct.Entity = value;
					if ((value != null))
					{
						value.ProductChars.Add(this);
						this._OrderedProductID = value.ID;
					}
					else
					{
						this._OrderedProductID = default(int);
					}
					this.SendPropertyChanged("OrderedProduct");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _GroupID;
		
		private EntitySet<PermissionsForRole> _PermissionsForRoles;
		
		private EntitySet<UserPermission> _UserPermissions;
		
		private EntityRef<PermissionGroup> _PermissionGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    #endregion
		
		public Permission()
		{
			this._PermissionsForRoles = new EntitySet<PermissionsForRole>(new Action<PermissionsForRole>(this.attach_PermissionsForRoles), new Action<PermissionsForRole>(this.detach_PermissionsForRoles));
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			this._PermissionGroup = default(EntityRef<PermissionGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._PermissionGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_PermissionsForRole", Storage="_PermissionsForRoles", ThisKey="ID", OtherKey="PermissionID")]
		public EntitySet<PermissionsForRole> PermissionsForRoles
		{
			get
			{
				return this._PermissionsForRoles;
			}
			set
			{
				this._PermissionsForRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_UserPermission", Storage="_UserPermissions", ThisKey="ID", OtherKey="PermissionID")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermissionGroup_Permission", Storage="_PermissionGroup", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PermissionGroup PermissionGroup
		{
			get
			{
				return this._PermissionGroup.Entity;
			}
			set
			{
				PermissionGroup previousValue = this._PermissionGroup.Entity;
				if (((previousValue != value) 
							|| (this._PermissionGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermissionGroup.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._PermissionGroup.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("PermissionGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermissionsForRoles(PermissionsForRole entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_PermissionsForRoles(PermissionsForRole entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Email;
		
		private string _Name;
		
		private string _UserName;
		
		private string _UserSurname;
		
		private string _UserPatrinomic;
		
		private System.Nullable<System.DateTime> _LastVisitDate;
		
		private string _Phone;
		
		private System.Nullable<bool> _IsPhoneConfirmed;
		
		private System.Nullable<int> _RegStep;
		
		private string _Nick;
		
		private string _DigitID;
		
		private System.Nullable<System.Guid> _ConfirmKey;
		
		private System.Nullable<bool> _IsLocked;
		
		private System.Nullable<bool> _IsDeleted;
		
		private EntitySet<LogEntry> _LogEntries;
		
		private EntitySet<LoginHistory> _LoginHistories;
		
		private EntitySet<Manager> _ManagerProfiles;
		
		private EntitySet<Manager> _MyManagers;
		
		private EntitySet<Mark> _Marks;
		
		private EntityRef<Membership> _Membership;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
		private EntitySet<Shop> _Shops;
		
		private EntitySet<UserPermission> _UserPermissions;
		
		private EntitySet<OperatorShop> _OperatorShops;
		
		private EntitySet<ShopProductChar> _ShopProductChars;
		
		private EntitySet<Consumer> _Consumers;
		
		private EntitySet<GraphSerial> _GraphSerials;
		
		private EntitySet<Graph> _Graphs;
		
		private EntitySet<Contractor> _Contractors;
		
		private EntitySet<Contractor> _Contractors1;
		
		private EntitySet<ContractedOrder> _ContractedOrders;
		
		private EntitySet<Store> _Stores;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<MailingList> _MailingLists;
		
		private EntitySet<WorkerGroup> _WorkerGroups;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Car> _Cars;
		
		private EntitySet<Worker> _Workers;
		
		private EntitySet<DeliveryList> _DeliveryLists;
		
		private EntitySet<GraphConstructor> _GraphConstructors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserSurnameChanging(string value);
    partial void OnUserSurnameChanged();
    partial void OnUserPatrinomicChanging(string value);
    partial void OnUserPatrinomicChanged();
    partial void OnLastVisitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastVisitDateChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnIsPhoneConfirmedChanging(System.Nullable<bool> value);
    partial void OnIsPhoneConfirmedChanged();
    partial void OnRegStepChanging(System.Nullable<int> value);
    partial void OnRegStepChanged();
    partial void OnNickChanging(string value);
    partial void OnNickChanged();
    partial void OnDigitIDChanging(string value);
    partial void OnDigitIDChanged();
    partial void OnConfirmKeyChanging(System.Nullable<System.Guid> value);
    partial void OnConfirmKeyChanged();
    partial void OnIsLockedChanging(System.Nullable<bool> value);
    partial void OnIsLockedChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public User()
		{
			this._LogEntries = new EntitySet<LogEntry>(new Action<LogEntry>(this.attach_LogEntries), new Action<LogEntry>(this.detach_LogEntries));
			this._LoginHistories = new EntitySet<LoginHistory>(new Action<LoginHistory>(this.attach_LoginHistories), new Action<LoginHistory>(this.detach_LoginHistories));
			this._ManagerProfiles = new EntitySet<Manager>(new Action<Manager>(this.attach_ManagerProfiles), new Action<Manager>(this.detach_ManagerProfiles));
			this._MyManagers = new EntitySet<Manager>(new Action<Manager>(this.attach_MyManagers), new Action<Manager>(this.detach_MyManagers));
			this._Marks = new EntitySet<Mark>(new Action<Mark>(this.attach_Marks), new Action<Mark>(this.detach_Marks));
			this._Membership = default(EntityRef<Membership>);
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			this._Shops = new EntitySet<Shop>(new Action<Shop>(this.attach_Shops), new Action<Shop>(this.detach_Shops));
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			this._OperatorShops = new EntitySet<OperatorShop>(new Action<OperatorShop>(this.attach_OperatorShops), new Action<OperatorShop>(this.detach_OperatorShops));
			this._ShopProductChars = new EntitySet<ShopProductChar>(new Action<ShopProductChar>(this.attach_ShopProductChars), new Action<ShopProductChar>(this.detach_ShopProductChars));
			this._Consumers = new EntitySet<Consumer>(new Action<Consumer>(this.attach_Consumers), new Action<Consumer>(this.detach_Consumers));
			this._GraphSerials = new EntitySet<GraphSerial>(new Action<GraphSerial>(this.attach_GraphSerials), new Action<GraphSerial>(this.detach_GraphSerials));
			this._Graphs = new EntitySet<Graph>(new Action<Graph>(this.attach_Graphs), new Action<Graph>(this.detach_Graphs));
			this._Contractors = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractors), new Action<Contractor>(this.detach_Contractors));
			this._Contractors1 = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractors1), new Action<Contractor>(this.detach_Contractors1));
			this._ContractedOrders = new EntitySet<ContractedOrder>(new Action<ContractedOrder>(this.attach_ContractedOrders), new Action<ContractedOrder>(this.detach_ContractedOrders));
			this._Stores = new EntitySet<Store>(new Action<Store>(this.attach_Stores), new Action<Store>(this.detach_Stores));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._MailingLists = new EntitySet<MailingList>(new Action<MailingList>(this.attach_MailingLists), new Action<MailingList>(this.detach_MailingLists));
			this._WorkerGroups = new EntitySet<WorkerGroup>(new Action<WorkerGroup>(this.attach_WorkerGroups), new Action<WorkerGroup>(this.detach_WorkerGroups));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			this._Workers = new EntitySet<Worker>(new Action<Worker>(this.attach_Workers), new Action<Worker>(this.detach_Workers));
			this._DeliveryLists = new EntitySet<DeliveryList>(new Action<DeliveryList>(this.attach_DeliveryLists), new Action<DeliveryList>(this.detach_DeliveryLists));
			this._GraphConstructors = new EntitySet<GraphConstructor>(new Action<GraphConstructor>(this.attach_GraphConstructors), new Action<GraphConstructor>(this.detach_GraphConstructors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(500)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserSurname", DbType="NVarChar(500)")]
		public string UserSurname
		{
			get
			{
				return this._UserSurname;
			}
			set
			{
				if ((this._UserSurname != value))
				{
					this.OnUserSurnameChanging(value);
					this.SendPropertyChanging();
					this._UserSurname = value;
					this.SendPropertyChanged("UserSurname");
					this.OnUserSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPatrinomic", DbType="NVarChar(500)")]
		public string UserPatrinomic
		{
			get
			{
				return this._UserPatrinomic;
			}
			set
			{
				if ((this._UserPatrinomic != value))
				{
					this.OnUserPatrinomicChanging(value);
					this.SendPropertyChanging();
					this._UserPatrinomic = value;
					this.SendPropertyChanged("UserPatrinomic");
					this.OnUserPatrinomicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastVisitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastVisitDate
		{
			get
			{
				return this._LastVisitDate;
			}
			set
			{
				if ((this._LastVisitDate != value))
				{
					this.OnLastVisitDateChanging(value);
					this.SendPropertyChanging();
					this._LastVisitDate = value;
					this.SendPropertyChanged("LastVisitDate");
					this.OnLastVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPhoneConfirmed", DbType="Bit")]
		public System.Nullable<bool> IsPhoneConfirmed
		{
			get
			{
				return this._IsPhoneConfirmed;
			}
			set
			{
				if ((this._IsPhoneConfirmed != value))
				{
					this.OnIsPhoneConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsPhoneConfirmed = value;
					this.SendPropertyChanged("IsPhoneConfirmed");
					this.OnIsPhoneConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegStep", DbType="Int")]
		public System.Nullable<int> RegStep
		{
			get
			{
				return this._RegStep;
			}
			set
			{
				if ((this._RegStep != value))
				{
					this.OnRegStepChanging(value);
					this.SendPropertyChanging();
					this._RegStep = value;
					this.SendPropertyChanged("RegStep");
					this.OnRegStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nick", DbType="NVarChar(500)")]
		public string Nick
		{
			get
			{
				return this._Nick;
			}
			set
			{
				if ((this._Nick != value))
				{
					this.OnNickChanging(value);
					this.SendPropertyChanging();
					this._Nick = value;
					this.SendPropertyChanged("Nick");
					this.OnNickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DigitID", DbType="NVarChar(9)")]
		public string DigitID
		{
			get
			{
				return this._DigitID;
			}
			set
			{
				if ((this._DigitID != value))
				{
					this.OnDigitIDChanging(value);
					this.SendPropertyChanging();
					this._DigitID = value;
					this.SendPropertyChanged("DigitID");
					this.OnDigitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmKey", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ConfirmKey
		{
			get
			{
				return this._ConfirmKey;
			}
			set
			{
				if ((this._ConfirmKey != value))
				{
					this.OnConfirmKeyChanging(value);
					this.SendPropertyChanging();
					this._ConfirmKey = value;
					this.SendPropertyChanged("ConfirmKey");
					this.OnConfirmKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLocked", DbType="Bit")]
		public System.Nullable<bool> IsLocked
		{
			get
			{
				return this._IsLocked;
			}
			set
			{
				if ((this._IsLocked != value))
				{
					this.OnIsLockedChanging(value);
					this.SendPropertyChanging();
					this._IsLocked = value;
					this.SendPropertyChanged("IsLocked");
					this.OnIsLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LogEntry", Storage="_LogEntries", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<LogEntry> LogEntries
		{
			get
			{
				return this._LogEntries;
			}
			set
			{
				this._LogEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LoginHistory", Storage="_LoginHistories", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<LoginHistory> LoginHistories
		{
			get
			{
				return this._LoginHistories;
			}
			set
			{
				this._LoginHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Manager", Storage="_ManagerProfiles", ThisKey="ID", OtherKey="ManagerUserID")]
		public EntitySet<Manager> ManagerProfiles
		{
			get
			{
				return this._ManagerProfiles;
			}
			set
			{
				this._ManagerProfiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Manager1", Storage="_MyManagers", ThisKey="ID", OtherKey="ShopOwnerID")]
		public EntitySet<Manager> MyManagers
		{
			get
			{
				return this._MyManagers;
			}
			set
			{
				this._MyManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Mark", Storage="_Marks", ThisKey="ID", OtherKey="MarkAuthorID")]
		public EntitySet<Mark> Marks
		{
			get
			{
				return this._Marks;
			}
			set
			{
				this._Marks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Membership", Storage="_Membership", ThisKey="ID", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public Membership Membership
		{
			get
			{
				return this._Membership.Entity;
			}
			set
			{
				Membership previousValue = this._Membership.Entity;
				if (((previousValue != value) 
							|| (this._Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membership.Entity = null;
						previousValue.User = null;
					}
					this._Membership.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Membership");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersInRole", Storage="_UsersInRoles", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Shop", Storage="_Shops", ThisKey="ID", OtherKey="Owner")]
		public EntitySet<Shop> Shops
		{
			get
			{
				return this._Shops;
			}
			set
			{
				this._Shops.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPermission", Storage="_UserPermissions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_OperatorShop", Storage="_OperatorShops", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<OperatorShop> OperatorShops
		{
			get
			{
				return this._OperatorShops;
			}
			set
			{
				this._OperatorShops.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ShopProductChar", Storage="_ShopProductChars", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<ShopProductChar> ShopProductChars
		{
			get
			{
				return this._ShopProductChars;
			}
			set
			{
				this._ShopProductChars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Consumer", Storage="_Consumers", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Consumer> Consumers
		{
			get
			{
				return this._Consumers;
			}
			set
			{
				this._Consumers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GraphSerial", Storage="_GraphSerials", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<GraphSerial> GraphSerials
		{
			get
			{
				return this._GraphSerials;
			}
			set
			{
				this._GraphSerials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Graph", Storage="_Graphs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Graph> Graphs
		{
			get
			{
				return this._Graphs;
			}
			set
			{
				this._Graphs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Contractor", Storage="_Contractors", ThisKey="ID", OtherKey="UserBy")]
		public EntitySet<Contractor> ContractorsBy
		{
			get
			{
				return this._Contractors;
			}
			set
			{
				this._Contractors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Contractor1", Storage="_Contractors1", ThisKey="ID", OtherKey="UserFor")]
		public EntitySet<Contractor> ContractorsFor
		{
			get
			{
				return this._Contractors1;
			}
			set
			{
				this._Contractors1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ContractedOrder", Storage="_ContractedOrders", ThisKey="ID", OtherKey="SenderID")]
		public EntitySet<ContractedOrder> ContractedOrders
		{
			get
			{
				return this._ContractedOrders;
			}
			set
			{
				this._ContractedOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Store", Storage="_Stores", ThisKey="ID", OtherKey="OwnerID")]
		public EntitySet<Store> Stores
		{
			get
			{
				return this._Stores;
			}
			set
			{
				this._Stores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Product", Storage="_Products", ThisKey="ID", OtherKey="OwnerID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MailingList", Storage="_MailingLists", ThisKey="ID", OtherKey="OwnerID")]
		public EntitySet<MailingList> MailingLists
		{
			get
			{
				return this._MailingLists;
			}
			set
			{
				this._MailingLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WorkerGroup", Storage="_WorkerGroups", ThisKey="ID", OtherKey="OwnerID")]
		public EntitySet<WorkerGroup> WorkerGroups
		{
			get
			{
				return this._WorkerGroups;
			}
			set
			{
				this._WorkerGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_Orders", ThisKey="ID", OtherKey="AddedByID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Car", Storage="_Cars", ThisKey="ID", OtherKey="OwnerID")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Worker", Storage="_Workers", ThisKey="ID", OtherKey="OwnerID")]
		public EntitySet<Worker> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DeliveryList", Storage="_DeliveryLists", ThisKey="ID", OtherKey="ApprovedBy")]
		public EntitySet<DeliveryList> DeliveryLists
		{
			get
			{
				return this._DeliveryLists;
			}
			set
			{
				this._DeliveryLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GraphConstructor", Storage="_GraphConstructors", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<GraphConstructor> GraphConstructors
		{
			get
			{
				return this._GraphConstructors;
			}
			set
			{
				this._GraphConstructors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LoginHistories(LoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LoginHistories(LoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ManagerProfiles(Manager entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ManagerProfiles(Manager entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MyManagers(Manager entity)
		{
			this.SendPropertyChanging();
			entity.OwnerUser = this;
		}
		
		private void detach_MyManagers(Manager entity)
		{
			this.SendPropertyChanging();
			entity.OwnerUser = null;
		}
		
		private void attach_Marks(Mark entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Marks(Mark entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Shops(Shop entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Shops(Shop entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_OperatorShops(OperatorShop entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_OperatorShops(OperatorShop entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ShopProductChars(ShopProductChar entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ShopProductChars(ShopProductChar entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Consumers(Consumer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Consumers(Consumer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_GraphSerials(GraphSerial entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GraphSerials(GraphSerial entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Graphs(Graph entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Graphs(Graph entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Contractors(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.UserByEntity = this;
		}
		
		private void detach_Contractors(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.UserByEntity = null;
		}
		
		private void attach_Contractors1(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.UserForEntity = this;
		}
		
		private void detach_Contractors1(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.UserForEntity = null;
		}
		
		private void attach_ContractedOrders(ContractedOrder entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ContractedOrders(ContractedOrder entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MailingLists(MailingList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MailingLists(MailingList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_WorkerGroups(WorkerGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_WorkerGroups(WorkerGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_DeliveryLists(DeliveryList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_DeliveryLists(DeliveryList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_GraphConstructors(GraphConstructor entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GraphConstructors(GraphConstructor entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPermissions")]
	public partial class UserPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PermissionID;
		
		private int _UserID;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public UserPermission()
		{
			this._Permission = default(EntityRef<Permission>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL")]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_UserPermission", Storage="_Permission", ThisKey="PermissionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._PermissionID = value.ID;
					}
					else
					{
						this._PermissionID = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPermission", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperatorShops")]
	public partial class OperatorShop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _ShopID;
		
		private EntityRef<Shop> _Shop;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnShopIDChanging(int value);
    partial void OnShopIDChanged();
    #endregion
		
		public OperatorShop()
		{
			this._Shop = default(EntityRef<Shop>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int NOT NULL")]
		public int ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_OperatorShop", Storage="_Shop", ThisKey="ShopID", OtherKey="ID", IsForeignKey=true)]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.OperatorShops.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.OperatorShops.Add(this);
						this._ShopID = value.ID;
					}
					else
					{
						this._ShopID = default(int);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_OperatorShop", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.OperatorShops.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.OperatorShops.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShopProductChars")]
	public partial class ShopProductChar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _ShopID;
		
		private string _DefValue;
		
		private int _UserID;
		
		private bool _IsMain;
		
		private int _Type;
		
		private bool _LoadInForm;
		
		private EntityRef<Shop> _Shop;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShopIDChanging(System.Nullable<int> value);
    partial void OnShopIDChanged();
    partial void OnDefValueChanging(string value);
    partial void OnDefValueChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsMainChanging(bool value);
    partial void OnIsMainChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnLoadInFormChanging(bool value);
    partial void OnLoadInFormChanged();
    #endregion
		
		public ShopProductChar()
		{
			this._Shop = default(EntityRef<Shop>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int")]
		public System.Nullable<int> ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefValue", DbType="NVarChar(500)")]
		public string DefValue
		{
			get
			{
				return this._DefValue;
			}
			set
			{
				if ((this._DefValue != value))
				{
					this.OnDefValueChanging(value);
					this.SendPropertyChanging();
					this._DefValue = value;
					this.SendPropertyChanged("DefValue");
					this.OnDefValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMain", DbType="Bit NOT NULL")]
		public bool IsMain
		{
			get
			{
				return this._IsMain;
			}
			set
			{
				if ((this._IsMain != value))
				{
					this.OnIsMainChanging(value);
					this.SendPropertyChanging();
					this._IsMain = value;
					this.SendPropertyChanged("IsMain");
					this.OnIsMainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadInForm", DbType="Bit NOT NULL")]
		public bool LoadInForm
		{
			get
			{
				return this._LoadInForm;
			}
			set
			{
				if ((this._LoadInForm != value))
				{
					this.OnLoadInFormChanging(value);
					this.SendPropertyChanging();
					this._LoadInForm = value;
					this.SendPropertyChanged("LoadInForm");
					this.OnLoadInFormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopProductChar", Storage="_Shop", ThisKey="ShopID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.ShopProductChars.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.ShopProductChars.Add(this);
						this._ShopID = value.ID;
					}
					else
					{
						this._ShopID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ShopProductChar", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ShopProductChars.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ShopProductChars.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderChars")]
	public partial class OrderChar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _OrderID;
		
		private string _Value;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public OrderChar()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(200)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderChar", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderChars.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderChars.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShopSettings")]
	public partial class ShopSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ShopID;
		
		private string _Name;
		
		private string _Value;
		
		private string _ItemKey;
		
		private EntityRef<Shop> _Shop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShopIDChanging(int value);
    partial void OnShopIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnItemKeyChanging(string value);
    partial void OnItemKeyChanged();
    #endregion
		
		public ShopSetting()
		{
			this._Shop = default(EntityRef<Shop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int NOT NULL")]
		public int ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemKey", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ItemKey
		{
			get
			{
				return this._ItemKey;
			}
			set
			{
				if ((this._ItemKey != value))
				{
					this.OnItemKeyChanging(value);
					this.SendPropertyChanging();
					this._ItemKey = value;
					this.SendPropertyChanged("ItemKey");
					this.OnItemKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopSetting", Storage="_Shop", ThisKey="ShopID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.ShopSettings.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.ShopSettings.Add(this);
						this._ShopID = value.ID;
					}
					else
					{
						this._ShopID = default(int);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Consumers")]
	public partial class Consumer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Patrinomic;
		
		private string _Phone;
		
		private System.Nullable<int> _UserID;
		
		private string _AddPhone;
		
		private string _Email;
		
		private bool _Sex;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPatrinomicChanging(string value);
    partial void OnPatrinomicChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnAddPhoneChanging(string value);
    partial void OnAddPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    #endregion
		
		public Consumer()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patrinomic", DbType="NVarChar(500)")]
		public string Patrinomic
		{
			get
			{
				return this._Patrinomic;
			}
			set
			{
				if ((this._Patrinomic != value))
				{
					this.OnPatrinomicChanging(value);
					this.SendPropertyChanging();
					this._Patrinomic = value;
					this.SendPropertyChanged("Patrinomic");
					this.OnPatrinomicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddPhone", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string AddPhone
		{
			get
			{
				return this._AddPhone;
			}
			set
			{
				if ((this._AddPhone != value))
				{
					this.OnAddPhoneChanging(value);
					this.SendPropertyChanging();
					this._AddPhone = value;
					this.SendPropertyChanged("AddPhone");
					this.OnAddPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consumer_Order", Storage="_Orders", ThisKey="ID", OtherKey="ConsumerID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Consumer", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Consumers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Consumers.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Consumer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Consumer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapPoints")]
	public partial class MapPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private decimal _Lat;
		
		private decimal _Lng;
		
		private System.Nullable<int> _SectorID;
		
		private int _Num;
		
		private EntitySet<DeliveryAddress> _DeliveryAddresses;
		
		private EntityRef<MapSector> _MapSector;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLatChanging(decimal value);
    partial void OnLatChanged();
    partial void OnLngChanging(decimal value);
    partial void OnLngChanged();
    partial void OnSectorIDChanging(System.Nullable<int> value);
    partial void OnSectorIDChanged();
    partial void OnNumChanging(int value);
    partial void OnNumChanged();
    #endregion
		
		public MapPoint()
		{
			this._DeliveryAddresses = new EntitySet<DeliveryAddress>(new Action<DeliveryAddress>(this.attach_DeliveryAddresses), new Action<DeliveryAddress>(this.detach_DeliveryAddresses));
			this._MapSector = default(EntityRef<MapSector>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Decimal(18,16) NOT NULL")]
		public decimal Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Decimal(18,16) NOT NULL")]
		public decimal Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectorID", DbType="Int")]
		public System.Nullable<int> SectorID
		{
			get
			{
				return this._SectorID;
			}
			set
			{
				if ((this._SectorID != value))
				{
					if (this._MapSector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectorIDChanging(value);
					this.SendPropertyChanging();
					this._SectorID = value;
					this.SendPropertyChanged("SectorID");
					this.OnSectorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Num", DbType="Int NOT NULL")]
		public int Num
		{
			get
			{
				return this._Num;
			}
			set
			{
				if ((this._Num != value))
				{
					this.OnNumChanging(value);
					this.SendPropertyChanging();
					this._Num = value;
					this.SendPropertyChanged("Num");
					this.OnNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapPoint_DeliveryAddress", Storage="_DeliveryAddresses", ThisKey="ID", OtherKey="PointID")]
		public EntitySet<DeliveryAddress> DeliveryAddresses
		{
			get
			{
				return this._DeliveryAddresses;
			}
			set
			{
				this._DeliveryAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapSector_MapPoint", Storage="_MapSector", ThisKey="SectorID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public MapSector MapSector
		{
			get
			{
				return this._MapSector.Entity;
			}
			set
			{
				MapSector previousValue = this._MapSector.Entity;
				if (((previousValue != value) 
							|| (this._MapSector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapSector.Entity = null;
						previousValue.MapPoints.Remove(this);
					}
					this._MapSector.Entity = value;
					if ((value != null))
					{
						value.MapPoints.Add(this);
						this._SectorID = value.ID;
					}
					else
					{
						this._SectorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MapSector");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeliveryAddresses(DeliveryAddress entity)
		{
			this.SendPropertyChanging();
			entity.MapPoint = this;
		}
		
		private void detach_DeliveryAddresses(DeliveryAddress entity)
		{
			this.SendPropertyChanging();
			entity.MapPoint = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapCity")]
	public partial class MapCity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CountryID;
		
		private int _RegionID;
		
		private string _Name;
		
		private EntityRef<MapCountry> _MapCountry;
		
		private EntityRef<MapRegion> _MapRegion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MapCity()
		{
			this._MapCountry = default(EntityRef<MapCountry>);
			this._MapRegion = default(EntityRef<MapRegion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._MapCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._MapRegion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapCountry_MapCity", Storage="_MapCountry", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public MapCountry MapCountry
		{
			get
			{
				return this._MapCountry.Entity;
			}
			set
			{
				MapCountry previousValue = this._MapCountry.Entity;
				if (((previousValue != value) 
							|| (this._MapCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapCountry.Entity = null;
						previousValue.MapCities.Remove(this);
					}
					this._MapCountry.Entity = value;
					if ((value != null))
					{
						value.MapCities.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("MapCountry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapRegion_MapCity", Storage="_MapRegion", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MapRegion MapRegion
		{
			get
			{
				return this._MapRegion.Entity;
			}
			set
			{
				MapRegion previousValue = this._MapRegion.Entity;
				if (((previousValue != value) 
							|| (this._MapRegion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapRegion.Entity = null;
						previousValue.MapCities.Remove(this);
					}
					this._MapRegion.Entity = value;
					if ((value != null))
					{
						value.MapCities.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("MapRegion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapCountry")]
	public partial class MapCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<MapCity> _MapCities;
		
		private EntitySet<MapRegion> _MapRegions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MapCountry()
		{
			this._MapCities = new EntitySet<MapCity>(new Action<MapCity>(this.attach_MapCities), new Action<MapCity>(this.detach_MapCities));
			this._MapRegions = new EntitySet<MapRegion>(new Action<MapRegion>(this.attach_MapRegions), new Action<MapRegion>(this.detach_MapRegions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapCountry_MapCity", Storage="_MapCities", ThisKey="ID", OtherKey="CountryID")]
		public EntitySet<MapCity> MapCities
		{
			get
			{
				return this._MapCities;
			}
			set
			{
				this._MapCities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapCountry_MapRegion", Storage="_MapRegions", ThisKey="ID", OtherKey="CountryID")]
		public EntitySet<MapRegion> MapRegions
		{
			get
			{
				return this._MapRegions;
			}
			set
			{
				this._MapRegions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapCities(MapCity entity)
		{
			this.SendPropertyChanging();
			entity.MapCountry = this;
		}
		
		private void detach_MapCities(MapCity entity)
		{
			this.SendPropertyChanging();
			entity.MapCountry = null;
		}
		
		private void attach_MapRegions(MapRegion entity)
		{
			this.SendPropertyChanging();
			entity.MapCountry = this;
		}
		
		private void detach_MapRegions(MapRegion entity)
		{
			this.SendPropertyChanging();
			entity.MapCountry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapRegion")]
	public partial class MapRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CountryID;
		
		private string _Name;
		
		private EntitySet<MapCity> _MapCities;
		
		private EntityRef<MapCountry> _MapCountry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MapRegion()
		{
			this._MapCities = new EntitySet<MapCity>(new Action<MapCity>(this.attach_MapCities), new Action<MapCity>(this.detach_MapCities));
			this._MapCountry = default(EntityRef<MapCountry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._MapCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapRegion_MapCity", Storage="_MapCities", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<MapCity> MapCities
		{
			get
			{
				return this._MapCities;
			}
			set
			{
				this._MapCities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapCountry_MapRegion", Storage="_MapCountry", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MapCountry MapCountry
		{
			get
			{
				return this._MapCountry.Entity;
			}
			set
			{
				MapCountry previousValue = this._MapCountry.Entity;
				if (((previousValue != value) 
							|| (this._MapCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapCountry.Entity = null;
						previousValue.MapRegions.Remove(this);
					}
					this._MapCountry.Entity = value;
					if ((value != null))
					{
						value.MapRegions.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("MapCountry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapCities(MapCity entity)
		{
			this.SendPropertyChanging();
			entity.MapRegion = this;
		}
		
		private void detach_MapCities(MapCity entity)
		{
			this.SendPropertyChanging();
			entity.MapRegion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GraphSerials")]
	public partial class GraphSerial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _UserID;
		
		private EntitySet<GraphSerialsOrder> _GraphSerialsOrders;
		
		private EntitySet<GraphSerialsRel> _GraphSerialsRels;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public GraphSerial()
		{
			this._GraphSerialsOrders = new EntitySet<GraphSerialsOrder>(new Action<GraphSerialsOrder>(this.attach_GraphSerialsOrders), new Action<GraphSerialsOrder>(this.detach_GraphSerialsOrders));
			this._GraphSerialsRels = new EntitySet<GraphSerialsRel>(new Action<GraphSerialsRel>(this.attach_GraphSerialsRels), new Action<GraphSerialsRel>(this.detach_GraphSerialsRels));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GraphSerial_GraphSerialsOrder", Storage="_GraphSerialsOrders", ThisKey="ID", OtherKey="SerialID")]
		public EntitySet<GraphSerialsOrder> GraphSerialsOrders
		{
			get
			{
				return this._GraphSerialsOrders;
			}
			set
			{
				this._GraphSerialsOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GraphSerial_GraphSerialsRel", Storage="_GraphSerialsRels", ThisKey="ID", OtherKey="SerialID")]
		public EntitySet<GraphSerialsRel> GraphSerialsRels
		{
			get
			{
				return this._GraphSerialsRels;
			}
			set
			{
				this._GraphSerialsRels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GraphSerial", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GraphSerials.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GraphSerials.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GraphSerialsOrders(GraphSerialsOrder entity)
		{
			this.SendPropertyChanging();
			entity.GraphSerial = this;
		}
		
		private void detach_GraphSerialsOrders(GraphSerialsOrder entity)
		{
			this.SendPropertyChanging();
			entity.GraphSerial = null;
		}
		
		private void attach_GraphSerialsRels(GraphSerialsRel entity)
		{
			this.SendPropertyChanging();
			entity.GraphSerial = this;
		}
		
		private void detach_GraphSerialsRels(GraphSerialsRel entity)
		{
			this.SendPropertyChanging();
			entity.GraphSerial = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GraphSerialsOrders")]
	public partial class GraphSerialsOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrderID;
		
		private int _SerialID;
		
		private EntityRef<GraphSerial> _GraphSerial;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnSerialIDChanging(int value);
    partial void OnSerialIDChanged();
    #endregion
		
		public GraphSerialsOrder()
		{
			this._GraphSerial = default(EntityRef<GraphSerial>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialID", DbType="Int NOT NULL")]
		public int SerialID
		{
			get
			{
				return this._SerialID;
			}
			set
			{
				if ((this._SerialID != value))
				{
					if (this._GraphSerial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSerialIDChanging(value);
					this.SendPropertyChanging();
					this._SerialID = value;
					this.SendPropertyChanged("SerialID");
					this.OnSerialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GraphSerial_GraphSerialsOrder", Storage="_GraphSerial", ThisKey="SerialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GraphSerial GraphSerial
		{
			get
			{
				return this._GraphSerial.Entity;
			}
			set
			{
				GraphSerial previousValue = this._GraphSerial.Entity;
				if (((previousValue != value) 
							|| (this._GraphSerial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GraphSerial.Entity = null;
						previousValue.GraphSerialsOrders.Remove(this);
					}
					this._GraphSerial.Entity = value;
					if ((value != null))
					{
						value.GraphSerialsOrders.Add(this);
						this._SerialID = value.ID;
					}
					else
					{
						this._SerialID = default(int);
					}
					this.SendPropertyChanged("GraphSerial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_GraphSerialsOrder", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.GraphSerialsOrders.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.GraphSerialsOrders.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GraphTypeFunc")]
	public partial class GraphTypeFunc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Func;
		
		private int _TypeID;
		
		private int _MinSequenceCount;
		
		private EntitySet<Graph> _Graphs;
		
		private EntityRef<GraphType> _GraphType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFuncChanging(string value);
    partial void OnFuncChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnMinSequenceCountChanging(int value);
    partial void OnMinSequenceCountChanged();
    #endregion
		
		public GraphTypeFunc()
		{
			this._Graphs = new EntitySet<Graph>(new Action<Graph>(this.attach_Graphs), new Action<Graph>(this.detach_Graphs));
			this._GraphType = default(EntityRef<GraphType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Func", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Func
		{
			get
			{
				return this._Func;
			}
			set
			{
				if ((this._Func != value))
				{
					this.OnFuncChanging(value);
					this.SendPropertyChanging();
					this._Func = value;
					this.SendPropertyChanged("Func");
					this.OnFuncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._GraphType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinSequenceCount", DbType="Int NOT NULL")]
		public int MinSequenceCount
		{
			get
			{
				return this._MinSequenceCount;
			}
			set
			{
				if ((this._MinSequenceCount != value))
				{
					this.OnMinSequenceCountChanging(value);
					this.SendPropertyChanging();
					this._MinSequenceCount = value;
					this.SendPropertyChanged("MinSequenceCount");
					this.OnMinSequenceCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GraphTypeFunc_Graph", Storage="_Graphs", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<Graph> Graphs
		{
			get
			{
				return this._Graphs;
			}
			set
			{
				this._Graphs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GraphType_GraphTypeFunc", Storage="_GraphType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GraphType GraphType
		{
			get
			{
				return this._GraphType.Entity;
			}
			set
			{
				GraphType previousValue = this._GraphType.Entity;
				if (((previousValue != value) 
							|| (this._GraphType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GraphType.Entity = null;
						previousValue.GraphTypeFuncs.Remove(this);
					}
					this._GraphType.Entity = value;
					if ((value != null))
					{
						value.GraphTypeFuncs.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("GraphType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Graphs(Graph entity)
		{
			this.SendPropertyChanging();
			entity.GraphTypeFunc = this;
		}
		
		private void detach_Graphs(Graph entity)
		{
			this.SendPropertyChanging();
			entity.GraphTypeFunc = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GraphTypes")]
	public partial class GraphType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Code;
		
		private EntitySet<GraphTypeFunc> _GraphTypeFuncs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public GraphType()
		{
			this._GraphTypeFuncs = new EntitySet<GraphTypeFunc>(new Action<GraphTypeFunc>(this.attach_GraphTypeFuncs), new Action<GraphTypeFunc>(this.detach_GraphTypeFuncs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GraphType_GraphTypeFunc", Storage="_GraphTypeFuncs", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<GraphTypeFunc> GraphTypeFuncs
		{
			get
			{
				return this._GraphTypeFuncs;
			}
			set
			{
				this._GraphTypeFuncs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GraphTypeFuncs(GraphTypeFunc entity)
		{
			this.SendPropertyChanging();
			entity.GraphType = this;
		}
		
		private void detach_GraphTypeFuncs(GraphTypeFunc entity)
		{
			this.SendPropertyChanging();
			entity.GraphType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Graph")]
	public partial class Graph : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Name;
		
		private int _OrderNum;
		
		private int _TypeID;
		
		private System.Nullable<System.DateTime> _MinDate;
		
		private System.Nullable<System.DateTime> _MaxDate;
		
		private System.Nullable<int> _Period;
		
		private EntitySet<GraphSerialsRel> _GraphSerialsRels;
		
		private EntityRef<GraphTypeFunc> _GraphTypeFunc;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderNumChanging(int value);
    partial void OnOrderNumChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnMinDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMinDateChanged();
    partial void OnMaxDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMaxDateChanged();
    partial void OnPeriodChanging(System.Nullable<int> value);
    partial void OnPeriodChanged();
    #endregion
		
		public Graph()
		{
			this._GraphSerialsRels = new EntitySet<GraphSerialsRel>(new Action<GraphSerialsRel>(this.attach_GraphSerialsRels), new Action<GraphSerialsRel>(this.detach_GraphSerialsRels));
			this._GraphTypeFunc = default(EntityRef<GraphTypeFunc>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int NOT NULL")]
		public int OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._GraphTypeFunc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MinDate
		{
			get
			{
				return this._MinDate;
			}
			set
			{
				if ((this._MinDate != value))
				{
					this.OnMinDateChanging(value);
					this.SendPropertyChanging();
					this._MinDate = value;
					this.SendPropertyChanged("MinDate");
					this.OnMinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MaxDate
		{
			get
			{
				return this._MaxDate;
			}
			set
			{
				if ((this._MaxDate != value))
				{
					this.OnMaxDateChanging(value);
					this.SendPropertyChanging();
					this._MaxDate = value;
					this.SendPropertyChanged("MaxDate");
					this.OnMaxDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="Int")]
		public System.Nullable<int> Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Graph_GraphSerialsRel", Storage="_GraphSerialsRels", ThisKey="ID", OtherKey="GraphID")]
		public EntitySet<GraphSerialsRel> GraphSerialsRels
		{
			get
			{
				return this._GraphSerialsRels;
			}
			set
			{
				this._GraphSerialsRels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GraphTypeFunc_Graph", Storage="_GraphTypeFunc", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GraphTypeFunc GraphTypeFunc
		{
			get
			{
				return this._GraphTypeFunc.Entity;
			}
			set
			{
				GraphTypeFunc previousValue = this._GraphTypeFunc.Entity;
				if (((previousValue != value) 
							|| (this._GraphTypeFunc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GraphTypeFunc.Entity = null;
						previousValue.Graphs.Remove(this);
					}
					this._GraphTypeFunc.Entity = value;
					if ((value != null))
					{
						value.Graphs.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("GraphTypeFunc");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Graph", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Graphs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Graphs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GraphSerialsRels(GraphSerialsRel entity)
		{
			this.SendPropertyChanging();
			entity.Graph = this;
		}
		
		private void detach_GraphSerialsRels(GraphSerialsRel entity)
		{
			this.SendPropertyChanging();
			entity.Graph = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GraphSerialsRels")]
	public partial class GraphSerialsRel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GraphID;
		
		private int _SerialID;
		
		private string _Color;
		
		private bool _IsHidden;
		
		private EntityRef<Graph> _Graph;
		
		private EntityRef<GraphSerial> _GraphSerial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGraphIDChanging(int value);
    partial void OnGraphIDChanged();
    partial void OnSerialIDChanging(int value);
    partial void OnSerialIDChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnIsHiddenChanging(bool value);
    partial void OnIsHiddenChanged();
    #endregion
		
		public GraphSerialsRel()
		{
			this._Graph = default(EntityRef<Graph>);
			this._GraphSerial = default(EntityRef<GraphSerial>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraphID", DbType="Int NOT NULL")]
		public int GraphID
		{
			get
			{
				return this._GraphID;
			}
			set
			{
				if ((this._GraphID != value))
				{
					if (this._Graph.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGraphIDChanging(value);
					this.SendPropertyChanging();
					this._GraphID = value;
					this.SendPropertyChanged("GraphID");
					this.OnGraphIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialID", DbType="Int NOT NULL")]
		public int SerialID
		{
			get
			{
				return this._SerialID;
			}
			set
			{
				if ((this._SerialID != value))
				{
					if (this._GraphSerial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSerialIDChanging(value);
					this.SendPropertyChanging();
					this._SerialID = value;
					this.SendPropertyChanged("SerialID");
					this.OnSerialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(7)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHidden", DbType="Bit NOT NULL")]
		public bool IsHidden
		{
			get
			{
				return this._IsHidden;
			}
			set
			{
				if ((this._IsHidden != value))
				{
					this.OnIsHiddenChanging(value);
					this.SendPropertyChanging();
					this._IsHidden = value;
					this.SendPropertyChanged("IsHidden");
					this.OnIsHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Graph_GraphSerialsRel", Storage="_Graph", ThisKey="GraphID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Graph Graph
		{
			get
			{
				return this._Graph.Entity;
			}
			set
			{
				Graph previousValue = this._Graph.Entity;
				if (((previousValue != value) 
							|| (this._Graph.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Graph.Entity = null;
						previousValue.GraphSerialsRels.Remove(this);
					}
					this._Graph.Entity = value;
					if ((value != null))
					{
						value.GraphSerialsRels.Add(this);
						this._GraphID = value.ID;
					}
					else
					{
						this._GraphID = default(int);
					}
					this.SendPropertyChanged("Graph");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GraphSerial_GraphSerialsRel", Storage="_GraphSerial", ThisKey="SerialID", OtherKey="ID", IsForeignKey=true)]
		public GraphSerial GraphSerial
		{
			get
			{
				return this._GraphSerial.Entity;
			}
			set
			{
				GraphSerial previousValue = this._GraphSerial.Entity;
				if (((previousValue != value) 
							|| (this._GraphSerial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GraphSerial.Entity = null;
						previousValue.GraphSerialsRels.Remove(this);
					}
					this._GraphSerial.Entity = value;
					if ((value != null))
					{
						value.GraphSerialsRels.Add(this);
						this._SerialID = value.ID;
					}
					else
					{
						this._SerialID = default(int);
					}
					this.SendPropertyChanged("GraphSerial");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contractors")]
	public partial class Contractor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserFor;
		
		private int _UserBy;
		
		private int _Status;
		
		private int _AccessRight;
		
		private System.DateTime _SendDate;
		
		private int _ShopID;
		
		private string _Message;
		
		private System.Nullable<decimal> _Cost;
		
		private EntitySet<ContractedOrder> _ContractedOrders;
		
		private EntityRef<Shop> _Shop;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserForChanging(int value);
    partial void OnUserForChanged();
    partial void OnUserByChanging(int value);
    partial void OnUserByChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnAccessRightChanging(int value);
    partial void OnAccessRightChanged();
    partial void OnSendDateChanging(System.DateTime value);
    partial void OnSendDateChanged();
    partial void OnShopIDChanging(int value);
    partial void OnShopIDChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    #endregion
		
		public Contractor()
		{
			this._ContractedOrders = new EntitySet<ContractedOrder>(new Action<ContractedOrder>(this.attach_ContractedOrders), new Action<ContractedOrder>(this.detach_ContractedOrders));
			this._Shop = default(EntityRef<Shop>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFor", DbType="Int NOT NULL")]
		public int UserFor
		{
			get
			{
				return this._UserFor;
			}
			set
			{
				if ((this._UserFor != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserForChanging(value);
					this.SendPropertyChanging();
					this._UserFor = value;
					this.SendPropertyChanged("UserFor");
					this.OnUserForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserBy", DbType="Int NOT NULL")]
		public int UserBy
		{
			get
			{
				return this._UserBy;
			}
			set
			{
				if ((this._UserBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserByChanging(value);
					this.SendPropertyChanging();
					this._UserBy = value;
					this.SendPropertyChanged("UserBy");
					this.OnUserByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessRight", DbType="Int NOT NULL")]
		public int AccessRight
		{
			get
			{
				return this._AccessRight;
			}
			set
			{
				if ((this._AccessRight != value))
				{
					this.OnAccessRightChanging(value);
					this.SendPropertyChanging();
					this._AccessRight = value;
					this.SendPropertyChanged("AccessRight");
					this.OnAccessRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendDate", DbType="DateTime NOT NULL")]
		public System.DateTime SendDate
		{
			get
			{
				return this._SendDate;
			}
			set
			{
				if ((this._SendDate != value))
				{
					this.OnSendDateChanging(value);
					this.SendPropertyChanging();
					this._SendDate = value;
					this.SendPropertyChanged("SendDate");
					this.OnSendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int NOT NULL")]
		public int ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(500)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_ContractedOrder", Storage="_ContractedOrders", ThisKey="ID", OtherKey="ContractorID")]
		public EntitySet<ContractedOrder> ContractedOrders
		{
			get
			{
				return this._ContractedOrders;
			}
			set
			{
				this._ContractedOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_Contractor", Storage="_Shop", ThisKey="ShopID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.Contractors.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.Contractors.Add(this);
						this._ShopID = value.ID;
					}
					else
					{
						this._ShopID = default(int);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Contractor", Storage="_User", ThisKey="UserBy", OtherKey="ID", IsForeignKey=true)]
		public User UserByEntity
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ContractorsBy.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ContractorsBy.Add(this);
						this._UserBy = value.ID;
					}
					else
					{
						this._UserBy = default(int);
					}
					this.SendPropertyChanged("UserByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Contractor1", Storage="_User1", ThisKey="UserFor", OtherKey="ID", IsForeignKey=true)]
		public User UserForEntity
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.ContractorsFor.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.ContractorsFor.Add(this);
						this._UserFor = value.ID;
					}
					else
					{
						this._UserFor = default(int);
					}
					this.SendPropertyChanged("UserForEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractedOrders(ContractedOrder entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_ContractedOrders(ContractedOrder entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractedOrders")]
	public partial class ContractedOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrderID;
		
		private int _ContractorID;
		
		private int _SenderID;
		
		private System.Nullable<decimal> _ContractorCost;
		
		private System.Nullable<int> _ContractorCostType;
		
		private EntityRef<Contractor> _Contractor;
		
		private EntityRef<User> _User;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnContractorIDChanging(int value);
    partial void OnContractorIDChanged();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    partial void OnContractorCostChanging(System.Nullable<decimal> value);
    partial void OnContractorCostChanged();
    partial void OnContractorCostTypeChanging(System.Nullable<int> value);
    partial void OnContractorCostTypeChanged();
    #endregion
		
		public ContractedOrder()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._User = default(EntityRef<User>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="Int NOT NULL")]
		public int ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int NOT NULL")]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorCost", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ContractorCost
		{
			get
			{
				return this._ContractorCost;
			}
			set
			{
				if ((this._ContractorCost != value))
				{
					this.OnContractorCostChanging(value);
					this.SendPropertyChanging();
					this._ContractorCost = value;
					this.SendPropertyChanged("ContractorCost");
					this.OnContractorCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorCostType", DbType="Int")]
		public System.Nullable<int> ContractorCostType
		{
			get
			{
				return this._ContractorCostType;
			}
			set
			{
				if ((this._ContractorCostType != value))
				{
					this.OnContractorCostTypeChanging(value);
					this.SendPropertyChanging();
					this._ContractorCostType = value;
					this.SendPropertyChanged("ContractorCostType");
					this.OnContractorCostTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_ContractedOrder", Storage="_Contractor", ThisKey="ContractorID", OtherKey="ID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.ContractedOrders.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.ContractedOrders.Add(this);
						this._ContractorID = value.ID;
					}
					else
					{
						this._ContractorID = default(int);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ContractedOrder", Storage="_User", ThisKey="SenderID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ContractedOrders.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ContractedOrders.Add(this);
						this._SenderID = value.ID;
					}
					else
					{
						this._SenderID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_ContractedOrder", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.ContractedOrders.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.ContractedOrders.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoredProducts")]
	public partial class StoredProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private int _StoreID;
		
		private bool _AlwaysExist;
		
		private EntitySet<StoreProductRefilling> _StoreProductRefillings;
		
		private EntityRef<Store> _Store;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnStoreIDChanging(int value);
    partial void OnStoreIDChanged();
    partial void OnAlwaysExistChanging(bool value);
    partial void OnAlwaysExistChanged();
    #endregion
		
		public StoredProduct()
		{
			this._StoreProductRefillings = new EntitySet<StoreProductRefilling>(new Action<StoreProductRefilling>(this.attach_StoreProductRefillings), new Action<StoreProductRefilling>(this.detach_StoreProductRefillings));
			this._Store = default(EntityRef<Store>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreID", DbType="Int NOT NULL")]
		public int StoreID
		{
			get
			{
				return this._StoreID;
			}
			set
			{
				if ((this._StoreID != value))
				{
					if (this._Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreIDChanging(value);
					this.SendPropertyChanging();
					this._StoreID = value;
					this.SendPropertyChanged("StoreID");
					this.OnStoreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlwaysExist", DbType="Bit NOT NULL")]
		public bool AlwaysExist
		{
			get
			{
				return this._AlwaysExist;
			}
			set
			{
				if ((this._AlwaysExist != value))
				{
					this.OnAlwaysExistChanging(value);
					this.SendPropertyChanging();
					this._AlwaysExist = value;
					this.SendPropertyChanged("AlwaysExist");
					this.OnAlwaysExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoredProduct_StoreProductRefilling", Storage="_StoreProductRefillings", ThisKey="ID", OtherKey="StoreProductID")]
		public EntitySet<StoreProductRefilling> StoreProductRefillings
		{
			get
			{
				return this._StoreProductRefillings;
			}
			set
			{
				this._StoreProductRefillings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_StoredProduct", Storage="_Store", ThisKey="StoreID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.StoredProducts.Remove(this);
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.StoredProducts.Add(this);
						this._StoreID = value.ID;
					}
					else
					{
						this._StoreID = default(int);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_StoredProduct", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.StoredProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.StoredProducts.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StoreProductRefillings(StoreProductRefilling entity)
		{
			this.SendPropertyChanging();
			entity.StoredProduct = this;
		}
		
		private void detach_StoreProductRefillings(StoreProductRefilling entity)
		{
			this.SendPropertyChanging();
			entity.StoredProduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShopProducts")]
	public partial class ShopProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ShopID;
		
		private int _ProductID;
		
		private EntityRef<Shop> _Shop;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShopIDChanging(int value);
    partial void OnShopIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    #endregion
		
		public ShopProduct()
		{
			this._Shop = default(EntityRef<Shop>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int NOT NULL")]
		public int ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopProduct", Storage="_Shop", ThisKey="ShopID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.ShopProducts.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.ShopProducts.Add(this);
						this._ShopID = value.ID;
					}
					else
					{
						this._ShopID = default(int);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ShopProduct", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ShopProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ShopProducts.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreProductRefilling")]
	public partial class StoreProductRefilling : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StoreProductID;
		
		private System.DateTime _Date;
		
		private decimal _Amount;
		
		private string _UnitCode;
		
		private decimal _Price;
		
		private EntityRef<StoredProduct> _StoredProduct;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStoreProductIDChanging(int value);
    partial void OnStoreProductIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnUnitCodeChanging(string value);
    partial void OnUnitCodeChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public StoreProductRefilling()
		{
			this._StoredProduct = default(EntityRef<StoredProduct>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreProductID", DbType="Int NOT NULL")]
		public int StoreProductID
		{
			get
			{
				return this._StoreProductID;
			}
			set
			{
				if ((this._StoreProductID != value))
				{
					if (this._StoredProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreProductIDChanging(value);
					this.SendPropertyChanging();
					this._StoreProductID = value;
					this.SendPropertyChanged("StoreProductID");
					this.OnStoreProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UnitCode
		{
			get
			{
				return this._UnitCode;
			}
			set
			{
				if ((this._UnitCode != value))
				{
					this.OnUnitCodeChanging(value);
					this.SendPropertyChanging();
					this._UnitCode = value;
					this.SendPropertyChanged("UnitCode");
					this.OnUnitCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoredProduct_StoreProductRefilling", Storage="_StoredProduct", ThisKey="StoreProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StoredProduct StoredProduct
		{
			get
			{
				return this._StoredProduct.Entity;
			}
			set
			{
				StoredProduct previousValue = this._StoredProduct.Entity;
				if (((previousValue != value) 
							|| (this._StoredProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoredProduct.Entity = null;
						previousValue.StoreProductRefillings.Remove(this);
					}
					this._StoredProduct.Entity = value;
					if ((value != null))
					{
						value.StoreProductRefillings.Add(this);
						this._StoreProductID = value.ID;
					}
					else
					{
						this._StoreProductID = default(int);
					}
					this.SendPropertyChanged("StoredProduct");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComplexProducts")]
	public partial class ComplexProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private EntitySet<ComplexProductComponent> _ComplexProductComponents;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public ComplexProduct()
		{
			this._ComplexProductComponents = new EntitySet<ComplexProductComponent>(new Action<ComplexProductComponent>(this.attach_ComplexProductComponents), new Action<ComplexProductComponent>(this.detach_ComplexProductComponents));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComplexProduct_ComplexProductComponent", Storage="_ComplexProductComponents", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<ComplexProductComponent> ComplexProductComponents
		{
			get
			{
				return this._ComplexProductComponents;
			}
			set
			{
				this._ComplexProductComponents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComplexProduct_Product", Storage="_Products", ThisKey="ID", OtherKey="ComplexID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComplexProductComponents(ComplexProductComponent entity)
		{
			this.SendPropertyChanging();
			entity.ComplexProduct = this;
		}
		
		private void detach_ComplexProductComponents(ComplexProductComponent entity)
		{
			this.SendPropertyChanging();
			entity.ComplexProduct = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ComplexProduct = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ComplexProduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComplexProductComponents")]
	public partial class ComplexProductComponent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ComplexID;
		
		private int _ProductID;
		
		private int _Amount;
		
		private EntityRef<ComplexProduct> _ComplexProduct;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnComplexIDChanging(int value);
    partial void OnComplexIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public ComplexProductComponent()
		{
			this._ComplexProduct = default(EntityRef<ComplexProduct>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplexID", DbType="Int NOT NULL")]
		public int ComplexID
		{
			get
			{
				return this._ComplexID;
			}
			set
			{
				if ((this._ComplexID != value))
				{
					this.OnComplexIDChanging(value);
					this.SendPropertyChanging();
					this._ComplexID = value;
					this.SendPropertyChanged("ComplexID");
					this.OnComplexIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if ((this._ComplexProduct.HasLoadedOrAssignedValue || this._Product.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComplexProduct_ComplexProductComponent", Storage="_ComplexProduct", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ComplexProduct ComplexProduct
		{
			get
			{
				return this._ComplexProduct.Entity;
			}
			set
			{
				ComplexProduct previousValue = this._ComplexProduct.Entity;
				if (((previousValue != value) 
							|| (this._ComplexProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComplexProduct.Entity = null;
						previousValue.ComplexProductComponents.Remove(this);
					}
					this._ComplexProduct.Entity = value;
					if ((value != null))
					{
						value.ComplexProductComponents.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("ComplexProduct");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ComplexProductComponent", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ComplexProductComponents.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ComplexProductComponents.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShopStores")]
	public partial class ShopStore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ShopID;
		
		private int _StoreID;
		
		private EntityRef<Shop> _Shop;
		
		private EntityRef<Store> _Store;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShopIDChanging(int value);
    partial void OnShopIDChanged();
    partial void OnStoreIDChanging(int value);
    partial void OnStoreIDChanged();
    #endregion
		
		public ShopStore()
		{
			this._Shop = default(EntityRef<Shop>);
			this._Store = default(EntityRef<Store>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int NOT NULL")]
		public int ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreID", DbType="Int NOT NULL")]
		public int StoreID
		{
			get
			{
				return this._StoreID;
			}
			set
			{
				if ((this._StoreID != value))
				{
					if (this._Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreIDChanging(value);
					this.SendPropertyChanging();
					this._StoreID = value;
					this.SendPropertyChanged("StoreID");
					this.OnStoreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopStore", Storage="_Shop", ThisKey="ShopID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.ShopStores.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.ShopStores.Add(this);
						this._ShopID = value.ID;
					}
					else
					{
						this._ShopID = default(int);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_ShopStore", Storage="_Store", ThisKey="StoreID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.ShopStores.Remove(this);
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.ShopStores.Add(this);
						this._StoreID = value.ID;
					}
					else
					{
						this._StoreID = default(int);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stores")]
	public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _AdressID;
		
		private int _OwnerID;
		
		private EntitySet<StoredProduct> _StoredProducts;
		
		private EntitySet<ShopStore> _ShopStores;
		
		private EntitySet<MapSector> _MapSectors;
		
		private EntitySet<DeliveryListOrder> _DeliveryListOrders;
		
		private EntityRef<User> _User;
		
		private EntityRef<DeliveryAddress> _DeliveryAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAdressIDChanging(System.Nullable<int> value);
    partial void OnAdressIDChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    #endregion
		
		public Store()
		{
			this._StoredProducts = new EntitySet<StoredProduct>(new Action<StoredProduct>(this.attach_StoredProducts), new Action<StoredProduct>(this.detach_StoredProducts));
			this._ShopStores = new EntitySet<ShopStore>(new Action<ShopStore>(this.attach_ShopStores), new Action<ShopStore>(this.detach_ShopStores));
			this._MapSectors = new EntitySet<MapSector>(new Action<MapSector>(this.attach_MapSectors), new Action<MapSector>(this.detach_MapSectors));
			this._DeliveryListOrders = new EntitySet<DeliveryListOrder>(new Action<DeliveryListOrder>(this.attach_DeliveryListOrders), new Action<DeliveryListOrder>(this.detach_DeliveryListOrders));
			this._User = default(EntityRef<User>);
			this._DeliveryAddress = default(EntityRef<DeliveryAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdressID", DbType="Int")]
		public System.Nullable<int> AdressID
		{
			get
			{
				return this._AdressID;
			}
			set
			{
				if ((this._AdressID != value))
				{
					if (this._DeliveryAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdressIDChanging(value);
					this.SendPropertyChanging();
					this._AdressID = value;
					this.SendPropertyChanged("AdressID");
					this.OnAdressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_StoredProduct", Storage="_StoredProducts", ThisKey="ID", OtherKey="StoreID")]
		public EntitySet<StoredProduct> StoredProducts
		{
			get
			{
				return this._StoredProducts;
			}
			set
			{
				this._StoredProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_ShopStore", Storage="_ShopStores", ThisKey="ID", OtherKey="StoreID")]
		public EntitySet<ShopStore> ShopStores
		{
			get
			{
				return this._ShopStores;
			}
			set
			{
				this._ShopStores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_MapSector", Storage="_MapSectors", ThisKey="ID", OtherKey="StoreID")]
		public EntitySet<MapSector> MapSectors
		{
			get
			{
				return this._MapSectors;
			}
			set
			{
				this._MapSectors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_DeliveryListOrder", Storage="_DeliveryListOrders", ThisKey="ID", OtherKey="StoreID")]
		public EntitySet<DeliveryListOrder> DeliveryListOrders
		{
			get
			{
				return this._DeliveryListOrders;
			}
			set
			{
				this._DeliveryListOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Store", Storage="_User", ThisKey="OwnerID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Stores.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Stores.Add(this);
						this._OwnerID = value.ID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryAddress_Store", Storage="_DeliveryAddress", ThisKey="AdressID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public DeliveryAddress DeliveryAddress
		{
			get
			{
				return this._DeliveryAddress.Entity;
			}
			set
			{
				DeliveryAddress previousValue = this._DeliveryAddress.Entity;
				if (((previousValue != value) 
							|| (this._DeliveryAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeliveryAddress.Entity = null;
						previousValue.Stores.Remove(this);
					}
					this._DeliveryAddress.Entity = value;
					if ((value != null))
					{
						value.Stores.Add(this);
						this._AdressID = value.ID;
					}
					else
					{
						this._AdressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DeliveryAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StoredProducts(StoredProduct entity)
		{
			this.SendPropertyChanging();
			entity.Store = this;
		}
		
		private void detach_StoredProducts(StoredProduct entity)
		{
			this.SendPropertyChanging();
			entity.Store = null;
		}
		
		private void attach_ShopStores(ShopStore entity)
		{
			this.SendPropertyChanging();
			entity.Store = this;
		}
		
		private void detach_ShopStores(ShopStore entity)
		{
			this.SendPropertyChanging();
			entity.Store = null;
		}
		
		private void attach_MapSectors(MapSector entity)
		{
			this.SendPropertyChanging();
			entity.Store = this;
		}
		
		private void detach_MapSectors(MapSector entity)
		{
			this.SendPropertyChanging();
			entity.Store = null;
		}
		
		private void attach_DeliveryListOrders(DeliveryListOrder entity)
		{
			this.SendPropertyChanging();
			entity.Store = this;
		}
		
		private void detach_DeliveryListOrders(DeliveryListOrder entity)
		{
			this.SendPropertyChanging();
			entity.Store = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceFormula")]
	public partial class PriceFormula : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private int _SourcePriceGroupID;
		
		private int _TargetPriceGroupID;
		
		private decimal _AddedPercent;
		
		private EntityRef<PriceGroup> _PriceGroup;
		
		private EntityRef<PriceGroup> _PriceGroup1;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnSourcePriceGroupIDChanging(int value);
    partial void OnSourcePriceGroupIDChanged();
    partial void OnTargetPriceGroupIDChanging(int value);
    partial void OnTargetPriceGroupIDChanged();
    partial void OnAddedPercentChanging(decimal value);
    partial void OnAddedPercentChanged();
    #endregion
		
		public PriceFormula()
		{
			this._PriceGroup = default(EntityRef<PriceGroup>);
			this._PriceGroup1 = default(EntityRef<PriceGroup>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourcePriceGroupID", DbType="Int NOT NULL")]
		public int SourcePriceGroupID
		{
			get
			{
				return this._SourcePriceGroupID;
			}
			set
			{
				if ((this._SourcePriceGroupID != value))
				{
					if (this._PriceGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourcePriceGroupIDChanging(value);
					this.SendPropertyChanging();
					this._SourcePriceGroupID = value;
					this.SendPropertyChanged("SourcePriceGroupID");
					this.OnSourcePriceGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetPriceGroupID", DbType="Int NOT NULL")]
		public int TargetPriceGroupID
		{
			get
			{
				return this._TargetPriceGroupID;
			}
			set
			{
				if ((this._TargetPriceGroupID != value))
				{
					if (this._PriceGroup1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetPriceGroupIDChanging(value);
					this.SendPropertyChanging();
					this._TargetPriceGroupID = value;
					this.SendPropertyChanged("TargetPriceGroupID");
					this.OnTargetPriceGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedPercent", DbType="Decimal(18,2) NOT NULL")]
		public decimal AddedPercent
		{
			get
			{
				return this._AddedPercent;
			}
			set
			{
				if ((this._AddedPercent != value))
				{
					this.OnAddedPercentChanging(value);
					this.SendPropertyChanging();
					this._AddedPercent = value;
					this.SendPropertyChanged("AddedPercent");
					this.OnAddedPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceGroup_PriceFormula", Storage="_PriceGroup", ThisKey="SourcePriceGroupID", OtherKey="ID", IsForeignKey=true)]
		public PriceGroup PriceGroup
		{
			get
			{
				return this._PriceGroup.Entity;
			}
			set
			{
				PriceGroup previousValue = this._PriceGroup.Entity;
				if (((previousValue != value) 
							|| (this._PriceGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceGroup.Entity = null;
						previousValue.PriceFormulas.Remove(this);
					}
					this._PriceGroup.Entity = value;
					if ((value != null))
					{
						value.PriceFormulas.Add(this);
						this._SourcePriceGroupID = value.ID;
					}
					else
					{
						this._SourcePriceGroupID = default(int);
					}
					this.SendPropertyChanged("PriceGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceGroup_PriceFormula1", Storage="_PriceGroup1", ThisKey="TargetPriceGroupID", OtherKey="ID", IsForeignKey=true)]
		public PriceGroup PriceGroup1
		{
			get
			{
				return this._PriceGroup1.Entity;
			}
			set
			{
				PriceGroup previousValue = this._PriceGroup1.Entity;
				if (((previousValue != value) 
							|| (this._PriceGroup1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceGroup1.Entity = null;
						previousValue.PriceFormulas1.Remove(this);
					}
					this._PriceGroup1.Entity = value;
					if ((value != null))
					{
						value.PriceFormulas1.Add(this);
						this._TargetPriceGroupID = value.ID;
					}
					else
					{
						this._TargetPriceGroupID = default(int);
					}
					this.SendPropertyChanged("PriceGroup1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_PriceFormula", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.PriceFormulas.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.PriceFormulas.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceGroup")]
	public partial class PriceGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _UniqueID;
		
		private EntitySet<PriceFormula> _PriceFormulas;
		
		private EntitySet<PriceFormula> _PriceFormulas1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUniqueIDChanging(string value);
    partial void OnUniqueIDChanged();
    #endregion
		
		public PriceGroup()
		{
			this._PriceFormulas = new EntitySet<PriceFormula>(new Action<PriceFormula>(this.attach_PriceFormulas), new Action<PriceFormula>(this.detach_PriceFormulas));
			this._PriceFormulas1 = new EntitySet<PriceFormula>(new Action<PriceFormula>(this.attach_PriceFormulas1), new Action<PriceFormula>(this.detach_PriceFormulas1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UniqueID
		{
			get
			{
				return this._UniqueID;
			}
			set
			{
				if ((this._UniqueID != value))
				{
					this.OnUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._UniqueID = value;
					this.SendPropertyChanged("UniqueID");
					this.OnUniqueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceGroup_PriceFormula", Storage="_PriceFormulas", ThisKey="ID", OtherKey="SourcePriceGroupID")]
		public EntitySet<PriceFormula> PriceFormulas
		{
			get
			{
				return this._PriceFormulas;
			}
			set
			{
				this._PriceFormulas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceGroup_PriceFormula1", Storage="_PriceFormulas1", ThisKey="ID", OtherKey="TargetPriceGroupID")]
		public EntitySet<PriceFormula> PriceFormulas1
		{
			get
			{
				return this._PriceFormulas1;
			}
			set
			{
				this._PriceFormulas1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PriceFormulas(PriceFormula entity)
		{
			this.SendPropertyChanging();
			entity.PriceGroup = this;
		}
		
		private void detach_PriceFormulas(PriceFormula entity)
		{
			this.SendPropertyChanging();
			entity.PriceGroup = null;
		}
		
		private void attach_PriceFormulas1(PriceFormula entity)
		{
			this.SendPropertyChanging();
			entity.PriceGroup1 = this;
		}
		
		private void detach_PriceFormulas1(PriceFormula entity)
		{
			this.SendPropertyChanging();
			entity.PriceGroup1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkerGroupParticipants")]
	public partial class WorkerGroupParticipant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _WorkerID;
		
		private int _GroupID;
		
		private EntityRef<WorkerGroup> _WorkerGroup;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWorkerIDChanging(int value);
    partial void OnWorkerIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    #endregion
		
		public WorkerGroupParticipant()
		{
			this._WorkerGroup = default(EntityRef<WorkerGroup>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerID", DbType="Int NOT NULL")]
		public int WorkerID
		{
			get
			{
				return this._WorkerID;
			}
			set
			{
				if ((this._WorkerID != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkerIDChanging(value);
					this.SendPropertyChanging();
					this._WorkerID = value;
					this.SendPropertyChanged("WorkerID");
					this.OnWorkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._WorkerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerGroup_WorkerGroupParticipant", Storage="_WorkerGroup", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WorkerGroup WorkerGroup
		{
			get
			{
				return this._WorkerGroup.Entity;
			}
			set
			{
				WorkerGroup previousValue = this._WorkerGroup.Entity;
				if (((previousValue != value) 
							|| (this._WorkerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkerGroup.Entity = null;
						previousValue.WorkerGroupParticipants.Remove(this);
					}
					this._WorkerGroup.Entity = value;
					if ((value != null))
					{
						value.WorkerGroupParticipants.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("WorkerGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_WorkerGroupParticipant", Storage="_Worker", ThisKey="WorkerID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.WorkerGroupParticipants.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.WorkerGroupParticipants.Add(this);
						this._WorkerID = value.ID;
					}
					else
					{
						this._WorkerID = default(int);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Jobs")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Code;
		
		private bool _IsSingle;
		
		private bool _HasCar;
		
		private EntitySet<Worker> _Workers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIsSingleChanging(bool value);
    partial void OnIsSingleChanged();
    partial void OnHasCarChanging(bool value);
    partial void OnHasCarChanged();
    #endregion
		
		public Job()
		{
			this._Workers = new EntitySet<Worker>(new Action<Worker>(this.attach_Workers), new Action<Worker>(this.detach_Workers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSingle", DbType="Bit NOT NULL")]
		public bool IsSingle
		{
			get
			{
				return this._IsSingle;
			}
			set
			{
				if ((this._IsSingle != value))
				{
					this.OnIsSingleChanging(value);
					this.SendPropertyChanging();
					this._IsSingle = value;
					this.SendPropertyChanged("IsSingle");
					this.OnIsSingleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasCar", DbType="Bit NOT NULL")]
		public bool HasCar
		{
			get
			{
				return this._HasCar;
			}
			set
			{
				if ((this._HasCar != value))
				{
					this.OnHasCarChanging(value);
					this.SendPropertyChanging();
					this._HasCar = value;
					this.SendPropertyChanged("HasCar");
					this.OnHasCarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Worker", Storage="_Workers", ThisKey="ID", OtherKey="JobID")]
		public EntitySet<Worker> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailingReplacements")]
	public partial class MailingReplacement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Replacement;
		
		private string _Description;
		
		private int _MailingID;
		
		private EntityRef<MailingList> _MailingList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReplacementChanging(string value);
    partial void OnReplacementChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMailingIDChanging(int value);
    partial void OnMailingIDChanged();
    #endregion
		
		public MailingReplacement()
		{
			this._MailingList = default(EntityRef<MailingList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Replacement", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Replacement
		{
			get
			{
				return this._Replacement;
			}
			set
			{
				if ((this._Replacement != value))
				{
					this.OnReplacementChanging(value);
					this.SendPropertyChanging();
					this._Replacement = value;
					this.SendPropertyChanged("Replacement");
					this.OnReplacementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailingID", DbType="Int NOT NULL")]
		public int MailingID
		{
			get
			{
				return this._MailingID;
			}
			set
			{
				if ((this._MailingID != value))
				{
					if (this._MailingList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMailingIDChanging(value);
					this.SendPropertyChanging();
					this._MailingID = value;
					this.SendPropertyChanged("MailingID");
					this.OnMailingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MailingList_MailingReplacement", Storage="_MailingList", ThisKey="MailingID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MailingList MailingList
		{
			get
			{
				return this._MailingList.Entity;
			}
			set
			{
				MailingList previousValue = this._MailingList.Entity;
				if (((previousValue != value) 
							|| (this._MailingList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MailingList.Entity = null;
						previousValue.MailingReplacements.Remove(this);
					}
					this._MailingList.Entity = value;
					if ((value != null))
					{
						value.MailingReplacements.Add(this);
						this._MailingID = value.ID;
					}
					else
					{
						this._MailingID = default(int);
					}
					this.SendPropertyChanged("MailingList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SiteSettings")]
	public partial class SiteSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Setting;
		
		private string _Value;
		
		private string _Title;
		
		private int _OrderNum;
		
		private string _Editor;
		
		private string _ObjectType;
		
		private string _GroupName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSettingChanging(string value);
    partial void OnSettingChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOrderNumChanging(int value);
    partial void OnOrderNumChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnObjectTypeChanging(string value);
    partial void OnObjectTypeChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public SiteSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Setting", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Setting
		{
			get
			{
				return this._Setting;
			}
			set
			{
				if ((this._Setting != value))
				{
					this.OnSettingChanging(value);
					this.SendPropertyChanging();
					this._Setting = value;
					this.SendPropertyChanged("Setting");
					this.OnSettingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int NOT NULL")]
		public int OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Editor", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectType", DbType="NVarChar(50)")]
		public string ObjectType
		{
			get
			{
				return this._ObjectType;
			}
			set
			{
				if ((this._ObjectType != value))
				{
					this.OnObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ObjectType = value;
					this.SendPropertyChanged("ObjectType");
					this.OnObjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.DateTime _AddedDate;
		
		private string _Article;
		
		private int _OwnerID;
		
		private string _UnitCode;
		
		private string _ImportID;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _SelfCost;
		
		private System.Nullable<decimal> _OptCost;
		
		private System.Nullable<int> _ComplexID;
		
		private System.Nullable<decimal> _Width;
		
		private System.Nullable<decimal> _Height;
		
		private System.Nullable<decimal> _Length;
		
		private System.Nullable<decimal> _Weight;
		
		private EntitySet<StoredProduct> _StoredProducts;
		
		private EntitySet<ShopProduct> _ShopProducts;
		
		private EntitySet<ComplexProductComponent> _ComplexProductComponents;
		
		private EntitySet<PriceFormula> _PriceFormulas;
		
		private EntitySet<OrderedProduct> _OrderedProducts;
		
		private EntityRef<ComplexProduct> _ComplexProduct;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnArticleChanging(string value);
    partial void OnArticleChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnUnitCodeChanging(string value);
    partial void OnUnitCodeChanged();
    partial void OnImportIDChanging(string value);
    partial void OnImportIDChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnSelfCostChanging(System.Nullable<decimal> value);
    partial void OnSelfCostChanged();
    partial void OnOptCostChanging(System.Nullable<decimal> value);
    partial void OnOptCostChanged();
    partial void OnComplexIDChanging(System.Nullable<int> value);
    partial void OnComplexIDChanged();
    partial void OnWidthChanging(System.Nullable<decimal> value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(System.Nullable<decimal> value);
    partial void OnHeightChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    #endregion
		
		public Product()
		{
			this._StoredProducts = new EntitySet<StoredProduct>(new Action<StoredProduct>(this.attach_StoredProducts), new Action<StoredProduct>(this.detach_StoredProducts));
			this._ShopProducts = new EntitySet<ShopProduct>(new Action<ShopProduct>(this.attach_ShopProducts), new Action<ShopProduct>(this.detach_ShopProducts));
			this._ComplexProductComponents = new EntitySet<ComplexProductComponent>(new Action<ComplexProductComponent>(this.attach_ComplexProductComponents), new Action<ComplexProductComponent>(this.detach_ComplexProductComponents));
			this._PriceFormulas = new EntitySet<PriceFormula>(new Action<PriceFormula>(this.attach_PriceFormulas), new Action<PriceFormula>(this.detach_PriceFormulas));
			this._OrderedProducts = new EntitySet<OrderedProduct>(new Action<OrderedProduct>(this.attach_OrderedProducts), new Action<OrderedProduct>(this.detach_OrderedProducts));
			this._ComplexProduct = default(EntityRef<ComplexProduct>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Article", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Article
		{
			get
			{
				return this._Article;
			}
			set
			{
				if ((this._Article != value))
				{
					this.OnArticleChanging(value);
					this.SendPropertyChanging();
					this._Article = value;
					this.SendPropertyChanged("Article");
					this.OnArticleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UnitCode
		{
			get
			{
				return this._UnitCode;
			}
			set
			{
				if ((this._UnitCode != value))
				{
					this.OnUnitCodeChanging(value);
					this.SendPropertyChanging();
					this._UnitCode = value;
					this.SendPropertyChanged("UnitCode");
					this.OnUnitCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportID", DbType="NVarChar(400)")]
		public string ImportID
		{
			get
			{
				return this._ImportID;
			}
			set
			{
				if ((this._ImportID != value))
				{
					this.OnImportIDChanging(value);
					this.SendPropertyChanging();
					this._ImportID = value;
					this.SendPropertyChanged("ImportID");
					this.OnImportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelfCost", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> SelfCost
		{
			get
			{
				return this._SelfCost;
			}
			set
			{
				if ((this._SelfCost != value))
				{
					this.OnSelfCostChanging(value);
					this.SendPropertyChanging();
					this._SelfCost = value;
					this.SendPropertyChanged("SelfCost");
					this.OnSelfCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptCost", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> OptCost
		{
			get
			{
				return this._OptCost;
			}
			set
			{
				if ((this._OptCost != value))
				{
					this.OnOptCostChanging(value);
					this.SendPropertyChanging();
					this._OptCost = value;
					this.SendPropertyChanged("OptCost");
					this.OnOptCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplexID", DbType="Int")]
		public System.Nullable<int> ComplexID
		{
			get
			{
				return this._ComplexID;
			}
			set
			{
				if ((this._ComplexID != value))
				{
					if (this._ComplexProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComplexIDChanging(value);
					this.SendPropertyChanging();
					this._ComplexID = value;
					this.SendPropertyChanged("ComplexID");
					this.OnComplexIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_StoredProduct", Storage="_StoredProducts", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<StoredProduct> StoredProducts
		{
			get
			{
				return this._StoredProducts;
			}
			set
			{
				this._StoredProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ShopProduct", Storage="_ShopProducts", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<ShopProduct> ShopProducts
		{
			get
			{
				return this._ShopProducts;
			}
			set
			{
				this._ShopProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ComplexProductComponent", Storage="_ComplexProductComponents", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<ComplexProductComponent> ComplexProductComponents
		{
			get
			{
				return this._ComplexProductComponents;
			}
			set
			{
				this._ComplexProductComponents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_PriceFormula", Storage="_PriceFormulas", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<PriceFormula> PriceFormulas
		{
			get
			{
				return this._PriceFormulas;
			}
			set
			{
				this._PriceFormulas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderedProduct", Storage="_OrderedProducts", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<OrderedProduct> OrderedProducts
		{
			get
			{
				return this._OrderedProducts;
			}
			set
			{
				this._OrderedProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComplexProduct_Product", Storage="_ComplexProduct", ThisKey="ComplexID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public ComplexProduct ComplexProduct
		{
			get
			{
				return this._ComplexProduct.Entity;
			}
			set
			{
				ComplexProduct previousValue = this._ComplexProduct.Entity;
				if (((previousValue != value) 
							|| (this._ComplexProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComplexProduct.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ComplexProduct.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ComplexID = value.ID;
					}
					else
					{
						this._ComplexID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ComplexProduct");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Product", Storage="_User", ThisKey="OwnerID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._OwnerID = value.ID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StoredProducts(StoredProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_StoredProducts(StoredProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ShopProducts(ShopProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ShopProducts(ShopProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ComplexProductComponents(ComplexProductComponent entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ComplexProductComponents(ComplexProductComponent entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_PriceFormulas(PriceFormula entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_PriceFormulas(PriceFormula entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_OrderedProducts(OrderedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderedProducts(OrderedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailingList")]
	public partial class MailingList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Header;
		
		private string _Letter;
		
		private string _LetterKey;
		
		private string _Name;
		
		private bool _IsForAdmin;
		
		private string _TargetMail;
		
		private bool _Enabled;
		
		private int _OwnerID;
		
		private int _Type;
		
		private EntitySet<MailingReplacement> _MailingReplacements;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnLetterChanging(string value);
    partial void OnLetterChanged();
    partial void OnLetterKeyChanging(string value);
    partial void OnLetterKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsForAdminChanging(bool value);
    partial void OnIsForAdminChanged();
    partial void OnTargetMailChanging(string value);
    partial void OnTargetMailChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public MailingList()
		{
			this._MailingReplacements = new EntitySet<MailingReplacement>(new Action<MailingReplacement>(this.attach_MailingReplacements), new Action<MailingReplacement>(this.detach_MailingReplacements));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Letter", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Letter
		{
			get
			{
				return this._Letter;
			}
			set
			{
				if ((this._Letter != value))
				{
					this.OnLetterChanging(value);
					this.SendPropertyChanging();
					this._Letter = value;
					this.SendPropertyChanged("Letter");
					this.OnLetterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LetterKey", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LetterKey
		{
			get
			{
				return this._LetterKey;
			}
			set
			{
				if ((this._LetterKey != value))
				{
					this.OnLetterKeyChanging(value);
					this.SendPropertyChanging();
					this._LetterKey = value;
					this.SendPropertyChanged("LetterKey");
					this.OnLetterKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForAdmin", DbType="Bit NOT NULL")]
		public bool IsForAdmin
		{
			get
			{
				return this._IsForAdmin;
			}
			set
			{
				if ((this._IsForAdmin != value))
				{
					this.OnIsForAdminChanging(value);
					this.SendPropertyChanging();
					this._IsForAdmin = value;
					this.SendPropertyChanged("IsForAdmin");
					this.OnIsForAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetMail", DbType="NVarChar(1000)")]
		public string TargetMail
		{
			get
			{
				return this._TargetMail;
			}
			set
			{
				if ((this._TargetMail != value))
				{
					this.OnTargetMailChanging(value);
					this.SendPropertyChanging();
					this._TargetMail = value;
					this.SendPropertyChanged("TargetMail");
					this.OnTargetMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MailingList_MailingReplacement", Storage="_MailingReplacements", ThisKey="ID", OtherKey="MailingID")]
		public EntitySet<MailingReplacement> MailingReplacements
		{
			get
			{
				return this._MailingReplacements;
			}
			set
			{
				this._MailingReplacements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MailingList", Storage="_User", ThisKey="OwnerID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MailingLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MailingLists.Add(this);
						this._OwnerID = value.ID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MailingReplacements(MailingReplacement entity)
		{
			this.SendPropertyChanging();
			entity.MailingList = this;
		}
		
		private void detach_MailingReplacements(MailingReplacement entity)
		{
			this.SendPropertyChanging();
			entity.MailingList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeliveryAddress")]
	public partial class DeliveryAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Region;
		
		private string _Town;
		
		private string _Street;
		
		private string _House;
		
		private string _Building;
		
		private string _Doorway;
		
		private string _Code;
		
		private string _Floor;
		
		private string _Flat;
		
		private string _Section;
		
		private int _ID;
		
		private System.Nullable<int> _PointID;
		
		private string _District;
		
		private string _ZipCode;
		
		private System.Nullable<decimal> _Cost;
		
		private System.Nullable<decimal> _LiftCost;
		
		private int _DeliveryType;
		
		private EntitySet<Store> _Stores;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<MapPoint> _MapPoint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnHouseChanging(string value);
    partial void OnHouseChanged();
    partial void OnBuildingChanging(string value);
    partial void OnBuildingChanged();
    partial void OnDoorwayChanging(string value);
    partial void OnDoorwayChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnFloorChanging(string value);
    partial void OnFloorChanged();
    partial void OnFlatChanging(string value);
    partial void OnFlatChanged();
    partial void OnSectionChanging(string value);
    partial void OnSectionChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPointIDChanging(System.Nullable<int> value);
    partial void OnPointIDChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    partial void OnLiftCostChanging(System.Nullable<decimal> value);
    partial void OnLiftCostChanged();
    partial void OnDeliveryTypeChanging(int value);
    partial void OnDeliveryTypeChanged();
    #endregion
		
		public DeliveryAddress()
		{
			this._Stores = new EntitySet<Store>(new Action<Store>(this.attach_Stores), new Action<Store>(this.detach_Stores));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._MapPoint = default(EntityRef<MapPoint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="NVarChar(400)")]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Town", DbType="NVarChar(400)")]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(400)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_House", DbType="NVarChar(50)")]
		public string House
		{
			get
			{
				return this._House;
			}
			set
			{
				if ((this._House != value))
				{
					this.OnHouseChanging(value);
					this.SendPropertyChanging();
					this._House = value;
					this.SendPropertyChanged("House");
					this.OnHouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Building", DbType="NVarChar(50)")]
		public string Building
		{
			get
			{
				return this._Building;
			}
			set
			{
				if ((this._Building != value))
				{
					this.OnBuildingChanging(value);
					this.SendPropertyChanging();
					this._Building = value;
					this.SendPropertyChanged("Building");
					this.OnBuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doorway", DbType="NVarChar(50)")]
		public string Doorway
		{
			get
			{
				return this._Doorway;
			}
			set
			{
				if ((this._Doorway != value))
				{
					this.OnDoorwayChanging(value);
					this.SendPropertyChanging();
					this._Doorway = value;
					this.SendPropertyChanged("Doorway");
					this.OnDoorwayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="NVarChar(50)")]
		public string Floor
		{
			get
			{
				return this._Floor;
			}
			set
			{
				if ((this._Floor != value))
				{
					this.OnFloorChanging(value);
					this.SendPropertyChanging();
					this._Floor = value;
					this.SendPropertyChanged("Floor");
					this.OnFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flat", DbType="NVarChar(50)")]
		public string Flat
		{
			get
			{
				return this._Flat;
			}
			set
			{
				if ((this._Flat != value))
				{
					this.OnFlatChanging(value);
					this.SendPropertyChanging();
					this._Flat = value;
					this.SendPropertyChanged("Flat");
					this.OnFlatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="NVarChar(50)")]
		public string Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this.OnSectionChanging(value);
					this.SendPropertyChanging();
					this._Section = value;
					this.SendPropertyChanged("Section");
					this.OnSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointID", DbType="Int")]
		public System.Nullable<int> PointID
		{
			get
			{
				return this._PointID;
			}
			set
			{
				if ((this._PointID != value))
				{
					if (this._MapPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPointIDChanging(value);
					this.SendPropertyChanging();
					this._PointID = value;
					this.SendPropertyChanged("PointID");
					this.OnPointIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="NVarChar(400)")]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="NVarChar(50)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiftCost", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> LiftCost
		{
			get
			{
				return this._LiftCost;
			}
			set
			{
				if ((this._LiftCost != value))
				{
					this.OnLiftCostChanging(value);
					this.SendPropertyChanging();
					this._LiftCost = value;
					this.SendPropertyChanged("LiftCost");
					this.OnLiftCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryType", DbType="Int NOT NULL")]
		public int DeliveryType
		{
			get
			{
				return this._DeliveryType;
			}
			set
			{
				if ((this._DeliveryType != value))
				{
					this.OnDeliveryTypeChanging(value);
					this.SendPropertyChanging();
					this._DeliveryType = value;
					this.SendPropertyChanged("DeliveryType");
					this.OnDeliveryTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryAddress_Store", Storage="_Stores", ThisKey="ID", OtherKey="AdressID")]
		public EntitySet<Store> Stores
		{
			get
			{
				return this._Stores;
			}
			set
			{
				this._Stores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryAddress_Order", Storage="_Orders", ThisKey="ID", OtherKey="AdressID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapPoint_DeliveryAddress", Storage="_MapPoint", ThisKey="PointID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public MapPoint MapPoint
		{
			get
			{
				return this._MapPoint.Entity;
			}
			set
			{
				MapPoint previousValue = this._MapPoint.Entity;
				if (((previousValue != value) 
							|| (this._MapPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapPoint.Entity = null;
						previousValue.DeliveryAddresses.Remove(this);
					}
					this._MapPoint.Entity = value;
					if ((value != null))
					{
						value.DeliveryAddresses.Add(this);
						this._PointID = value.ID;
					}
					else
					{
						this._PointID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MapPoint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryAddress = this;
		}
		
		private void detach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryAddress = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderDelivery = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderDelivery = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapSectors")]
	public partial class MapSector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ShopID;
		
		private System.Nullable<int> _StoreID;
		
		private string _Name;
		
		private string _Color;
		
		private int _Type;
		
		private EntitySet<MapPoint> _MapPoints;
		
		private EntitySet<MapSectorCar> _MapSectorCars;
		
		private EntitySet<MapSectorCourier> _MapSectorCouriers;
		
		private EntityRef<Shop> _Shop;
		
		private EntityRef<Store> _Store;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShopIDChanging(int value);
    partial void OnShopIDChanged();
    partial void OnStoreIDChanging(System.Nullable<int> value);
    partial void OnStoreIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public MapSector()
		{
			this._MapPoints = new EntitySet<MapPoint>(new Action<MapPoint>(this.attach_MapPoints), new Action<MapPoint>(this.detach_MapPoints));
			this._MapSectorCars = new EntitySet<MapSectorCar>(new Action<MapSectorCar>(this.attach_MapSectorCars), new Action<MapSectorCar>(this.detach_MapSectorCars));
			this._MapSectorCouriers = new EntitySet<MapSectorCourier>(new Action<MapSectorCourier>(this.attach_MapSectorCouriers), new Action<MapSectorCourier>(this.detach_MapSectorCouriers));
			this._Shop = default(EntityRef<Shop>);
			this._Store = default(EntityRef<Store>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int NOT NULL")]
		public int ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreID", DbType="Int")]
		public System.Nullable<int> StoreID
		{
			get
			{
				return this._StoreID;
			}
			set
			{
				if ((this._StoreID != value))
				{
					if (this._Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreIDChanging(value);
					this.SendPropertyChanging();
					this._StoreID = value;
					this.SendPropertyChanged("StoreID");
					this.OnStoreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapSector_MapPoint", Storage="_MapPoints", ThisKey="ID", OtherKey="SectorID")]
		public EntitySet<MapPoint> MapPoints
		{
			get
			{
				return this._MapPoints;
			}
			set
			{
				this._MapPoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapSector_MapSectorCar", Storage="_MapSectorCars", ThisKey="ID", OtherKey="SectorID")]
		public EntitySet<MapSectorCar> MapSectorCars
		{
			get
			{
				return this._MapSectorCars;
			}
			set
			{
				this._MapSectorCars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapSector_MapSectorCourier", Storage="_MapSectorCouriers", ThisKey="ID", OtherKey="SectorID")]
		public EntitySet<MapSectorCourier> MapSectorCouriers
		{
			get
			{
				return this._MapSectorCouriers;
			}
			set
			{
				this._MapSectorCouriers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_MapSector", Storage="_Shop", ThisKey="ShopID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.MapSectors.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.MapSectors.Add(this);
						this._ShopID = value.ID;
					}
					else
					{
						this._ShopID = default(int);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_MapSector", Storage="_Store", ThisKey="StoreID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.MapSectors.Remove(this);
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.MapSectors.Add(this);
						this._StoreID = value.ID;
					}
					else
					{
						this._StoreID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapPoints(MapPoint entity)
		{
			this.SendPropertyChanging();
			entity.MapSector = this;
		}
		
		private void detach_MapPoints(MapPoint entity)
		{
			this.SendPropertyChanging();
			entity.MapSector = null;
		}
		
		private void attach_MapSectorCars(MapSectorCar entity)
		{
			this.SendPropertyChanging();
			entity.MapSector = this;
		}
		
		private void detach_MapSectorCars(MapSectorCar entity)
		{
			this.SendPropertyChanging();
			entity.MapSector = null;
		}
		
		private void attach_MapSectorCouriers(MapSectorCourier entity)
		{
			this.SendPropertyChanging();
			entity.MapSector = this;
		}
		
		private void detach_MapSectorCouriers(MapSectorCourier entity)
		{
			this.SendPropertyChanging();
			entity.MapSector = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkerGroups")]
	public partial class WorkerGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _OwnerID;
		
		private EntitySet<WorkerGroupParticipant> _WorkerGroupParticipants;
		
		private EntitySet<Car> _Cars;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    #endregion
		
		public WorkerGroup()
		{
			this._WorkerGroupParticipants = new EntitySet<WorkerGroupParticipant>(new Action<WorkerGroupParticipant>(this.attach_WorkerGroupParticipants), new Action<WorkerGroupParticipant>(this.detach_WorkerGroupParticipants));
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerGroup_WorkerGroupParticipant", Storage="_WorkerGroupParticipants", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<WorkerGroupParticipant> WorkerGroupParticipants
		{
			get
			{
				return this._WorkerGroupParticipants;
			}
			set
			{
				this._WorkerGroupParticipants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerGroup_Car", Storage="_Cars", ThisKey="ID", OtherKey="WorkerGroupID")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WorkerGroup", Storage="_User", ThisKey="OwnerID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.WorkerGroups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.WorkerGroups.Add(this);
						this._OwnerID = value.ID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkerGroupParticipants(WorkerGroupParticipant entity)
		{
			this.SendPropertyChanging();
			entity.WorkerGroup = this;
		}
		
		private void detach_WorkerGroupParticipants(WorkerGroupParticipant entity)
		{
			this.SendPropertyChanging();
			entity.WorkerGroup = null;
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.WorkerGroup = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.WorkerGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapSectorCars")]
	public partial class MapSectorCar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CarID;
		
		private int _SectorID;
		
		private EntityRef<MapSector> _MapSector;
		
		private EntityRef<Car> _Car;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCarIDChanging(int value);
    partial void OnCarIDChanged();
    partial void OnSectorIDChanging(int value);
    partial void OnSectorIDChanged();
    #endregion
		
		public MapSectorCar()
		{
			this._MapSector = default(EntityRef<MapSector>);
			this._Car = default(EntityRef<Car>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarID", DbType="Int NOT NULL")]
		public int CarID
		{
			get
			{
				return this._CarID;
			}
			set
			{
				if ((this._CarID != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarIDChanging(value);
					this.SendPropertyChanging();
					this._CarID = value;
					this.SendPropertyChanged("CarID");
					this.OnCarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectorID", DbType="Int NOT NULL")]
		public int SectorID
		{
			get
			{
				return this._SectorID;
			}
			set
			{
				if ((this._SectorID != value))
				{
					if (this._MapSector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectorIDChanging(value);
					this.SendPropertyChanging();
					this._SectorID = value;
					this.SendPropertyChanged("SectorID");
					this.OnSectorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapSector_MapSectorCar", Storage="_MapSector", ThisKey="SectorID", OtherKey="ID", IsForeignKey=true)]
		public MapSector MapSector
		{
			get
			{
				return this._MapSector.Entity;
			}
			set
			{
				MapSector previousValue = this._MapSector.Entity;
				if (((previousValue != value) 
							|| (this._MapSector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapSector.Entity = null;
						previousValue.MapSectorCars.Remove(this);
					}
					this._MapSector.Entity = value;
					if ((value != null))
					{
						value.MapSectorCars.Add(this);
						this._SectorID = value.ID;
					}
					else
					{
						this._SectorID = default(int);
					}
					this.SendPropertyChanged("MapSector");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_MapSectorCar", Storage="_Car", ThisKey="CarID", OtherKey="ID", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.MapSectorCars.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.MapSectorCars.Add(this);
						this._CarID = value.ID;
					}
					else
					{
						this._CarID = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapSectorCouriers")]
	public partial class MapSectorCourier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _WorkerID;
		
		private int _SectorID;
		
		private EntityRef<MapSector> _MapSector;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWorkerIDChanging(int value);
    partial void OnWorkerIDChanged();
    partial void OnSectorIDChanging(int value);
    partial void OnSectorIDChanged();
    #endregion
		
		public MapSectorCourier()
		{
			this._MapSector = default(EntityRef<MapSector>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerID", DbType="Int NOT NULL")]
		public int WorkerID
		{
			get
			{
				return this._WorkerID;
			}
			set
			{
				if ((this._WorkerID != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkerIDChanging(value);
					this.SendPropertyChanging();
					this._WorkerID = value;
					this.SendPropertyChanged("WorkerID");
					this.OnWorkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectorID", DbType="Int NOT NULL")]
		public int SectorID
		{
			get
			{
				return this._SectorID;
			}
			set
			{
				if ((this._SectorID != value))
				{
					if (this._MapSector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectorIDChanging(value);
					this.SendPropertyChanging();
					this._SectorID = value;
					this.SendPropertyChanged("SectorID");
					this.OnSectorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapSector_MapSectorCourier", Storage="_MapSector", ThisKey="SectorID", OtherKey="ID", IsForeignKey=true)]
		public MapSector MapSector
		{
			get
			{
				return this._MapSector.Entity;
			}
			set
			{
				MapSector previousValue = this._MapSector.Entity;
				if (((previousValue != value) 
							|| (this._MapSector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapSector.Entity = null;
						previousValue.MapSectorCouriers.Remove(this);
					}
					this._MapSector.Entity = value;
					if ((value != null))
					{
						value.MapSectorCouriers.Add(this);
						this._SectorID = value.ID;
					}
					else
					{
						this._SectorID = default(int);
					}
					this.SendPropertyChanged("MapSector");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_MapSectorCourier", Storage="_Worker", ThisKey="WorkerID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.MapSectorCouriers.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.MapSectorCouriers.Add(this);
						this._WorkerID = value.ID;
					}
					else
					{
						this._WorkerID = default(int);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _CreateDate;
		
		private System.Nullable<int> _ShopID;
		
		private int _Status;
		
		private int _AddedByID;
		
		private System.Nullable<int> _ConsumerID;
		
		private bool _IsTemp;
		
		private string _Warning;
		
		private bool _IsImportant;
		
		private string _OrderNumber;
		
		private System.Nullable<System.DateTime> _DeliveryDate;
		
		private string _DeliveryAddress;
		
		private System.Nullable<System.DateTime> _SkipMarkTo;
		
		private bool _IsPayed;
		
		private System.Nullable<int> _AdressID;
		
		private System.Nullable<int> _CarID;
		
		private System.Nullable<int> _WorkerID;
		
		private EntitySet<Mark> _Marks;
		
		private EntitySet<OrderChar> _OrderChars;
		
		private EntitySet<GraphSerialsOrder> _GraphSerialsOrders;
		
		private EntitySet<ContractedOrder> _ContractedOrders;
		
		private EntitySet<DeliveryListOrder> _DeliveryListOrders;
		
		private EntitySet<OrderedProduct> _OrderedProducts;
		
		private EntityRef<DeliveryAddress> _OrderDelivery;
		
		private EntityRef<Shop> _Shop;
		
		private EntityRef<User> _User;
		
		private EntityRef<Consumer> _Consumer;
		
		private EntityRef<Car> _Car;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnShopIDChanging(System.Nullable<int> value);
    partial void OnShopIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnAddedByIDChanging(int value);
    partial void OnAddedByIDChanged();
    partial void OnConsumerIDChanging(System.Nullable<int> value);
    partial void OnConsumerIDChanged();
    partial void OnIsTempChanging(bool value);
    partial void OnIsTempChanged();
    partial void OnWarningChanging(string value);
    partial void OnWarningChanged();
    partial void OnIsImportantChanging(bool value);
    partial void OnIsImportantChanged();
    partial void OnOrderNumberChanging(string value);
    partial void OnOrderNumberChanged();
    partial void OnDeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliveryDateChanged();
    partial void OnDeliveryAddressChanging(string value);
    partial void OnDeliveryAddressChanged();
    partial void OnSkipMarkToChanging(System.Nullable<System.DateTime> value);
    partial void OnSkipMarkToChanged();
    partial void OnIsPayedChanging(bool value);
    partial void OnIsPayedChanged();
    partial void OnAdressIDChanging(System.Nullable<int> value);
    partial void OnAdressIDChanged();
    partial void OnCarIDChanging(System.Nullable<int> value);
    partial void OnCarIDChanged();
    partial void OnWorkerIDChanging(System.Nullable<int> value);
    partial void OnWorkerIDChanged();
    #endregion
		
		public Order()
		{
			this._Marks = new EntitySet<Mark>(new Action<Mark>(this.attach_Marks), new Action<Mark>(this.detach_Marks));
			this._OrderChars = new EntitySet<OrderChar>(new Action<OrderChar>(this.attach_OrderChars), new Action<OrderChar>(this.detach_OrderChars));
			this._GraphSerialsOrders = new EntitySet<GraphSerialsOrder>(new Action<GraphSerialsOrder>(this.attach_GraphSerialsOrders), new Action<GraphSerialsOrder>(this.detach_GraphSerialsOrders));
			this._ContractedOrders = new EntitySet<ContractedOrder>(new Action<ContractedOrder>(this.attach_ContractedOrders), new Action<ContractedOrder>(this.detach_ContractedOrders));
			this._DeliveryListOrders = new EntitySet<DeliveryListOrder>(new Action<DeliveryListOrder>(this.attach_DeliveryListOrders), new Action<DeliveryListOrder>(this.detach_DeliveryListOrders));
			this._OrderedProducts = new EntitySet<OrderedProduct>(new Action<OrderedProduct>(this.attach_OrderedProducts), new Action<OrderedProduct>(this.detach_OrderedProducts));
			this._OrderDelivery = default(EntityRef<DeliveryAddress>);
			this._Shop = default(EntityRef<Shop>);
			this._User = default(EntityRef<User>);
			this._Consumer = default(EntityRef<Consumer>);
			this._Car = default(EntityRef<Car>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int")]
		public System.Nullable<int> ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedByID", DbType="Int NOT NULL")]
		public int AddedByID
		{
			get
			{
				return this._AddedByID;
			}
			set
			{
				if ((this._AddedByID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddedByIDChanging(value);
					this.SendPropertyChanging();
					this._AddedByID = value;
					this.SendPropertyChanged("AddedByID");
					this.OnAddedByIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsumerID", DbType="Int")]
		public System.Nullable<int> ConsumerID
		{
			get
			{
				return this._ConsumerID;
			}
			set
			{
				if ((this._ConsumerID != value))
				{
					if (this._Consumer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConsumerIDChanging(value);
					this.SendPropertyChanging();
					this._ConsumerID = value;
					this.SendPropertyChanged("ConsumerID");
					this.OnConsumerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTemp", DbType="Bit NOT NULL")]
		public bool IsTemp
		{
			get
			{
				return this._IsTemp;
			}
			set
			{
				if ((this._IsTemp != value))
				{
					this.OnIsTempChanging(value);
					this.SendPropertyChanging();
					this._IsTemp = value;
					this.SendPropertyChanged("IsTemp");
					this.OnIsTempChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Warning", DbType="NVarChar(MAX)")]
		public string Warning
		{
			get
			{
				return this._Warning;
			}
			set
			{
				if ((this._Warning != value))
				{
					this.OnWarningChanging(value);
					this.SendPropertyChanging();
					this._Warning = value;
					this.SendPropertyChanged("Warning");
					this.OnWarningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsImportant", DbType="Bit NOT NULL")]
		public bool IsImportant
		{
			get
			{
				return this._IsImportant;
			}
			set
			{
				if ((this._IsImportant != value))
				{
					this.OnIsImportantChanging(value);
					this.SendPropertyChanging();
					this._IsImportant = value;
					this.SendPropertyChanged("IsImportant");
					this.OnIsImportantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="NVarChar(50)")]
		public string OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this.OnDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDate = value;
					this.SendPropertyChanged("DeliveryDate");
					this.OnDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryAddress", DbType="NVarChar(MAX)")]
		public string DeliveryAddress
		{
			get
			{
				return this._DeliveryAddress;
			}
			set
			{
				if ((this._DeliveryAddress != value))
				{
					this.OnDeliveryAddressChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAddress = value;
					this.SendPropertyChanged("DeliveryAddress");
					this.OnDeliveryAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkipMarkTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> SkipMarkTo
		{
			get
			{
				return this._SkipMarkTo;
			}
			set
			{
				if ((this._SkipMarkTo != value))
				{
					this.OnSkipMarkToChanging(value);
					this.SendPropertyChanging();
					this._SkipMarkTo = value;
					this.SendPropertyChanged("SkipMarkTo");
					this.OnSkipMarkToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPayed", DbType="Bit NOT NULL")]
		public bool IsPayed
		{
			get
			{
				return this._IsPayed;
			}
			set
			{
				if ((this._IsPayed != value))
				{
					this.OnIsPayedChanging(value);
					this.SendPropertyChanging();
					this._IsPayed = value;
					this.SendPropertyChanged("IsPayed");
					this.OnIsPayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdressID", DbType="Int")]
		public System.Nullable<int> AdressID
		{
			get
			{
				return this._AdressID;
			}
			set
			{
				if ((this._AdressID != value))
				{
					if (this._OrderDelivery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdressIDChanging(value);
					this.SendPropertyChanging();
					this._AdressID = value;
					this.SendPropertyChanged("AdressID");
					this.OnAdressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarID", DbType="Int")]
		public System.Nullable<int> CarID
		{
			get
			{
				return this._CarID;
			}
			set
			{
				if ((this._CarID != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarIDChanging(value);
					this.SendPropertyChanging();
					this._CarID = value;
					this.SendPropertyChanged("CarID");
					this.OnCarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerID", DbType="Int")]
		public System.Nullable<int> WorkerID
		{
			get
			{
				return this._WorkerID;
			}
			set
			{
				if ((this._WorkerID != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkerIDChanging(value);
					this.SendPropertyChanging();
					this._WorkerID = value;
					this.SendPropertyChanged("WorkerID");
					this.OnWorkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Mark", Storage="_Marks", ThisKey="ID", OtherKey="OrderID")]
		public EntitySet<Mark> Marks
		{
			get
			{
				return this._Marks;
			}
			set
			{
				this._Marks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderChar", Storage="_OrderChars", ThisKey="ID", OtherKey="OrderID")]
		public EntitySet<OrderChar> OrderChars
		{
			get
			{
				return this._OrderChars;
			}
			set
			{
				this._OrderChars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_GraphSerialsOrder", Storage="_GraphSerialsOrders", ThisKey="ID", OtherKey="OrderID")]
		public EntitySet<GraphSerialsOrder> GraphSerialsOrders
		{
			get
			{
				return this._GraphSerialsOrders;
			}
			set
			{
				this._GraphSerialsOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_ContractedOrder", Storage="_ContractedOrders", ThisKey="ID", OtherKey="OrderID")]
		public EntitySet<ContractedOrder> ContractedOrders
		{
			get
			{
				return this._ContractedOrders;
			}
			set
			{
				this._ContractedOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_DeliveryListOrder", Storage="_DeliveryListOrders", ThisKey="ID", OtherKey="OrderID")]
		public EntitySet<DeliveryListOrder> DeliveryListOrders
		{
			get
			{
				return this._DeliveryListOrders;
			}
			set
			{
				this._DeliveryListOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderedProduct", Storage="_OrderedProducts", ThisKey="ID", OtherKey="OrderID")]
		public EntitySet<OrderedProduct> OrderedProducts
		{
			get
			{
				return this._OrderedProducts;
			}
			set
			{
				this._OrderedProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryAddress_Order", Storage="_OrderDelivery", ThisKey="AdressID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public DeliveryAddress OrderDelivery
		{
			get
			{
				return this._OrderDelivery.Entity;
			}
			set
			{
				DeliveryAddress previousValue = this._OrderDelivery.Entity;
				if (((previousValue != value) 
							|| (this._OrderDelivery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDelivery.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderDelivery.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._AdressID = value.ID;
					}
					else
					{
						this._AdressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrderDelivery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_Order", Storage="_Shop", ThisKey="ShopID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ShopID = value.ID;
					}
					else
					{
						this._ShopID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_User", ThisKey="AddedByID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._AddedByID = value.ID;
					}
					else
					{
						this._AddedByID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consumer_Order", Storage="_Consumer", ThisKey="ConsumerID", OtherKey="ID", IsForeignKey=true)]
		public Consumer Consumer
		{
			get
			{
				return this._Consumer.Entity;
			}
			set
			{
				Consumer previousValue = this._Consumer.Entity;
				if (((previousValue != value) 
							|| (this._Consumer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Consumer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Consumer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ConsumerID = value.ID;
					}
					else
					{
						this._ConsumerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Consumer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Order", Storage="_Car", ThisKey="CarID", OtherKey="ID", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CarID = value.ID;
					}
					else
					{
						this._CarID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Order", Storage="_Worker", ThisKey="WorkerID", OtherKey="ID", IsForeignKey=true)]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._WorkerID = value.ID;
					}
					else
					{
						this._WorkerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Marks(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Marks(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderChars(OrderChar entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderChars(OrderChar entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_GraphSerialsOrders(GraphSerialsOrder entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_GraphSerialsOrders(GraphSerialsOrder entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_ContractedOrders(ContractedOrder entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_ContractedOrders(ContractedOrder entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_DeliveryListOrders(DeliveryListOrder entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_DeliveryListOrders(DeliveryListOrder entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderedProducts(OrderedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderedProducts(OrderedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private decimal _MaxWeight;
		
		private string _Number;
		
		private System.Nullable<decimal> _Height;
		
		private System.Nullable<decimal> _Width;
		
		private System.Nullable<decimal> _Length;
		
		private System.Nullable<int> _Passengers;
		
		private int _OwnerID;
		
		private System.Nullable<int> _WorkerGroupID;
		
		private string _Color;
		
		private EntitySet<MapSectorCar> _MapSectorCars;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<DeliveryListOrder> _DeliveryListOrders;
		
		private EntityRef<User> _User;
		
		private EntityRef<WorkerGroup> _WorkerGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMaxWeightChanging(decimal value);
    partial void OnMaxWeightChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnHeightChanging(System.Nullable<decimal> value);
    partial void OnHeightChanged();
    partial void OnWidthChanging(System.Nullable<decimal> value);
    partial void OnWidthChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
    partial void OnPassengersChanging(System.Nullable<int> value);
    partial void OnPassengersChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnWorkerGroupIDChanging(System.Nullable<int> value);
    partial void OnWorkerGroupIDChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    #endregion
		
		public Car()
		{
			this._MapSectorCars = new EntitySet<MapSectorCar>(new Action<MapSectorCar>(this.attach_MapSectorCars), new Action<MapSectorCar>(this.detach_MapSectorCars));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._DeliveryListOrders = new EntitySet<DeliveryListOrder>(new Action<DeliveryListOrder>(this.attach_DeliveryListOrders), new Action<DeliveryListOrder>(this.detach_DeliveryListOrders));
			this._User = default(EntityRef<User>);
			this._WorkerGroup = default(EntityRef<WorkerGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxWeight", DbType="Decimal(18,2) NOT NULL")]
		public decimal MaxWeight
		{
			get
			{
				return this._MaxWeight;
			}
			set
			{
				if ((this._MaxWeight != value))
				{
					this.OnMaxWeightChanging(value);
					this.SendPropertyChanging();
					this._MaxWeight = value;
					this.SendPropertyChanged("MaxWeight");
					this.OnMaxWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passengers", DbType="Int")]
		public System.Nullable<int> Passengers
		{
			get
			{
				return this._Passengers;
			}
			set
			{
				if ((this._Passengers != value))
				{
					this.OnPassengersChanging(value);
					this.SendPropertyChanging();
					this._Passengers = value;
					this.SendPropertyChanged("Passengers");
					this.OnPassengersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerGroupID", DbType="Int")]
		public System.Nullable<int> WorkerGroupID
		{
			get
			{
				return this._WorkerGroupID;
			}
			set
			{
				if ((this._WorkerGroupID != value))
				{
					if (this._WorkerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkerGroupIDChanging(value);
					this.SendPropertyChanging();
					this._WorkerGroupID = value;
					this.SendPropertyChanged("WorkerGroupID");
					this.OnWorkerGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_MapSectorCar", Storage="_MapSectorCars", ThisKey="ID", OtherKey="CarID")]
		public EntitySet<MapSectorCar> MapSectorCars
		{
			get
			{
				return this._MapSectorCars;
			}
			set
			{
				this._MapSectorCars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Order", Storage="_Orders", ThisKey="ID", OtherKey="CarID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_DeliveryListOrder", Storage="_DeliveryListOrders", ThisKey="ID", OtherKey="CarID")]
		public EntitySet<DeliveryListOrder> DeliveryListOrders
		{
			get
			{
				return this._DeliveryListOrders;
			}
			set
			{
				this._DeliveryListOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Car", Storage="_User", ThisKey="OwnerID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._OwnerID = value.ID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerGroup_Car", Storage="_WorkerGroup", ThisKey="WorkerGroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public WorkerGroup WorkerGroup
		{
			get
			{
				return this._WorkerGroup.Entity;
			}
			set
			{
				WorkerGroup previousValue = this._WorkerGroup.Entity;
				if (((previousValue != value) 
							|| (this._WorkerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkerGroup.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._WorkerGroup.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._WorkerGroupID = value.ID;
					}
					else
					{
						this._WorkerGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("WorkerGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapSectorCars(MapSectorCar entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_MapSectorCars(MapSectorCar entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
		
		private void attach_DeliveryListOrders(DeliveryListOrder entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_DeliveryListOrders(DeliveryListOrder entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workers")]
	public partial class Worker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _JobID;
		
		private string _Name;
		
		private string _Phone;
		
		private string _Document1;
		
		private string _Document2;
		
		private int _OwnerID;
		
		private string _Color;
		
		private EntitySet<WorkerGroupParticipant> _WorkerGroupParticipants;
		
		private EntitySet<MapSectorCourier> _MapSectorCouriers;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<DeliveryListOrder> _DeliveryListOrders;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnDocument1Changing(string value);
    partial void OnDocument1Changed();
    partial void OnDocument2Changing(string value);
    partial void OnDocument2Changed();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    #endregion
		
		public Worker()
		{
			this._WorkerGroupParticipants = new EntitySet<WorkerGroupParticipant>(new Action<WorkerGroupParticipant>(this.attach_WorkerGroupParticipants), new Action<WorkerGroupParticipant>(this.detach_WorkerGroupParticipants));
			this._MapSectorCouriers = new EntitySet<MapSectorCourier>(new Action<MapSectorCourier>(this.attach_MapSectorCouriers), new Action<MapSectorCourier>(this.detach_MapSectorCouriers));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._DeliveryListOrders = new EntitySet<DeliveryListOrder>(new Action<DeliveryListOrder>(this.attach_DeliveryListOrders), new Action<DeliveryListOrder>(this.detach_DeliveryListOrders));
			this._Job = default(EntityRef<Job>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL")]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document1", DbType="NVarChar(MAX)")]
		public string Document1
		{
			get
			{
				return this._Document1;
			}
			set
			{
				if ((this._Document1 != value))
				{
					this.OnDocument1Changing(value);
					this.SendPropertyChanging();
					this._Document1 = value;
					this.SendPropertyChanged("Document1");
					this.OnDocument1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document2", DbType="NVarChar(MAX)")]
		public string Document2
		{
			get
			{
				return this._Document2;
			}
			set
			{
				if ((this._Document2 != value))
				{
					this.OnDocument2Changing(value);
					this.SendPropertyChanging();
					this._Document2 = value;
					this.SendPropertyChanged("Document2");
					this.OnDocument2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(50)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_WorkerGroupParticipant", Storage="_WorkerGroupParticipants", ThisKey="ID", OtherKey="WorkerID")]
		public EntitySet<WorkerGroupParticipant> WorkerGroupParticipants
		{
			get
			{
				return this._WorkerGroupParticipants;
			}
			set
			{
				this._WorkerGroupParticipants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_MapSectorCourier", Storage="_MapSectorCouriers", ThisKey="ID", OtherKey="WorkerID")]
		public EntitySet<MapSectorCourier> MapSectorCouriers
		{
			get
			{
				return this._MapSectorCouriers;
			}
			set
			{
				this._MapSectorCouriers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Order", Storage="_Orders", ThisKey="ID", OtherKey="WorkerID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_DeliveryListOrder", Storage="_DeliveryListOrders", ThisKey="ID", OtherKey="WorkerID")]
		public EntitySet<DeliveryListOrder> DeliveryListOrders
		{
			get
			{
				return this._DeliveryListOrders;
			}
			set
			{
				this._DeliveryListOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Worker", Storage="_Job", ThisKey="JobID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._JobID = value.ID;
					}
					else
					{
						this._JobID = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Worker", Storage="_User", ThisKey="OwnerID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._OwnerID = value.ID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkerGroupParticipants(WorkerGroupParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_WorkerGroupParticipants(WorkerGroupParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
		
		private void attach_MapSectorCouriers(MapSectorCourier entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_MapSectorCouriers(MapSectorCourier entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
		
		private void attach_DeliveryListOrders(DeliveryListOrder entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_DeliveryListOrders(DeliveryListOrder entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeliveryListOrder")]
	public partial class DeliveryListOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ListID;
		
		private System.Nullable<int> _OrderID;
		
		private int _OrderNum;
		
		private System.Nullable<int> _StoreID;
		
		private System.Nullable<int> _Type;
		
		private System.Nullable<int> _WorkerID;
		
		private System.Nullable<int> _CarID;
		
		private bool _ReturnPoint;
		
		private bool _ShowOnMap;
		
		private EntityRef<Car> _Car;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Store> _Store;
		
		private EntityRef<Worker> _Worker;
		
		private EntityRef<DeliveryList> _DeliveryList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnListIDChanging(int value);
    partial void OnListIDChanged();
    partial void OnOrderIDChanging(System.Nullable<int> value);
    partial void OnOrderIDChanged();
    partial void OnOrderNumChanging(int value);
    partial void OnOrderNumChanged();
    partial void OnStoreIDChanging(System.Nullable<int> value);
    partial void OnStoreIDChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnWorkerIDChanging(System.Nullable<int> value);
    partial void OnWorkerIDChanged();
    partial void OnCarIDChanging(System.Nullable<int> value);
    partial void OnCarIDChanged();
    partial void OnReturnPointChanging(bool value);
    partial void OnReturnPointChanged();
    partial void OnShowOnMapChanging(bool value);
    partial void OnShowOnMapChanged();
    #endregion
		
		public DeliveryListOrder()
		{
			this._Car = default(EntityRef<Car>);
			this._Order = default(EntityRef<Order>);
			this._Store = default(EntityRef<Store>);
			this._Worker = default(EntityRef<Worker>);
			this._DeliveryList = default(EntityRef<DeliveryList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListID", DbType="Int NOT NULL")]
		public int ListID
		{
			get
			{
				return this._ListID;
			}
			set
			{
				if ((this._ListID != value))
				{
					if (this._DeliveryList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnListIDChanging(value);
					this.SendPropertyChanging();
					this._ListID = value;
					this.SendPropertyChanged("ListID");
					this.OnListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int")]
		public System.Nullable<int> OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int NOT NULL")]
		public int OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreID", DbType="Int")]
		public System.Nullable<int> StoreID
		{
			get
			{
				return this._StoreID;
			}
			set
			{
				if ((this._StoreID != value))
				{
					if (this._Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreIDChanging(value);
					this.SendPropertyChanging();
					this._StoreID = value;
					this.SendPropertyChanged("StoreID");
					this.OnStoreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerID", DbType="Int")]
		public System.Nullable<int> WorkerID
		{
			get
			{
				return this._WorkerID;
			}
			set
			{
				if ((this._WorkerID != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkerIDChanging(value);
					this.SendPropertyChanging();
					this._WorkerID = value;
					this.SendPropertyChanged("WorkerID");
					this.OnWorkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarID", DbType="Int")]
		public System.Nullable<int> CarID
		{
			get
			{
				return this._CarID;
			}
			set
			{
				if ((this._CarID != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarIDChanging(value);
					this.SendPropertyChanging();
					this._CarID = value;
					this.SendPropertyChanged("CarID");
					this.OnCarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnPoint", DbType="Bit NOT NULL")]
		public bool ReturnPoint
		{
			get
			{
				return this._ReturnPoint;
			}
			set
			{
				if ((this._ReturnPoint != value))
				{
					this.OnReturnPointChanging(value);
					this.SendPropertyChanging();
					this._ReturnPoint = value;
					this.SendPropertyChanged("ReturnPoint");
					this.OnReturnPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowOnMap", DbType="Bit NOT NULL")]
		public bool ShowOnMap
		{
			get
			{
				return this._ShowOnMap;
			}
			set
			{
				if ((this._ShowOnMap != value))
				{
					this.OnShowOnMapChanging(value);
					this.SendPropertyChanging();
					this._ShowOnMap = value;
					this.SendPropertyChanged("ShowOnMap");
					this.OnShowOnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_DeliveryListOrder", Storage="_Car", ThisKey="CarID", OtherKey="ID", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.DeliveryListOrders.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.DeliveryListOrders.Add(this);
						this._CarID = value.ID;
					}
					else
					{
						this._CarID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_DeliveryListOrder", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.DeliveryListOrders.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.DeliveryListOrders.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_DeliveryListOrder", Storage="_Store", ThisKey="StoreID", OtherKey="ID", IsForeignKey=true)]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.DeliveryListOrders.Remove(this);
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.DeliveryListOrders.Add(this);
						this._StoreID = value.ID;
					}
					else
					{
						this._StoreID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_DeliveryListOrder", Storage="_Worker", ThisKey="WorkerID", OtherKey="ID", IsForeignKey=true)]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.DeliveryListOrders.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.DeliveryListOrders.Add(this);
						this._WorkerID = value.ID;
					}
					else
					{
						this._WorkerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryList_DeliveryListOrder", Storage="_DeliveryList", ThisKey="ListID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DeliveryList DeliveryList
		{
			get
			{
				return this._DeliveryList.Entity;
			}
			set
			{
				DeliveryList previousValue = this._DeliveryList.Entity;
				if (((previousValue != value) 
							|| (this._DeliveryList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeliveryList.Entity = null;
						previousValue.DeliveryListOrders.Remove(this);
					}
					this._DeliveryList.Entity = value;
					if ((value != null))
					{
						value.DeliveryListOrders.Add(this);
						this._ListID = value.ID;
					}
					else
					{
						this._ListID = default(int);
					}
					this.SendPropertyChanged("DeliveryList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderedProducts")]
	public partial class OrderedProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private int _OrderID;
		
		private decimal _Price;
		
		private int _Amount;
		
		private EntitySet<ProductChar> _ProductChars;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public OrderedProduct()
		{
			this._ProductChars = new EntitySet<ProductChar>(new Action<ProductChar>(this.attach_ProductChars), new Action<ProductChar>(this.detach_ProductChars));
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderedProduct_ProductChar", Storage="_ProductChars", ThisKey="ID", OtherKey="OrderedProductID")]
		public EntitySet<ProductChar> ProductChars
		{
			get
			{
				return this._ProductChars;
			}
			set
			{
				this._ProductChars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderedProduct", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderedProducts.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderedProducts.Add(this);
						this._OrderID = value.ID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderedProduct", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderedProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderedProducts.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductChars(ProductChar entity)
		{
			this.SendPropertyChanging();
			entity.OrderedProduct = this;
		}
		
		private void detach_ProductChars(ProductChar entity)
		{
			this.SendPropertyChanging();
			entity.OrderedProduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeliveryList")]
	public partial class DeliveryList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Date;
		
		private bool _Approved;
		
		private int _ShopID;
		
		private System.Nullable<int> _ApprovedBy;
		
		private EntitySet<DeliveryListOrder> _DeliveryListOrders;
		
		private EntityRef<Shop> _Shop;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    partial void OnShopIDChanging(int value);
    partial void OnShopIDChanged();
    partial void OnApprovedByChanging(System.Nullable<int> value);
    partial void OnApprovedByChanged();
    #endregion
		
		public DeliveryList()
		{
			this._DeliveryListOrders = new EntitySet<DeliveryListOrder>(new Action<DeliveryListOrder>(this.attach_DeliveryListOrders), new Action<DeliveryListOrder>(this.detach_DeliveryListOrders));
			this._Shop = default(EntityRef<Shop>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit NOT NULL")]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int NOT NULL")]
		public int ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="Int")]
		public System.Nullable<int> ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryList_DeliveryListOrder", Storage="_DeliveryListOrders", ThisKey="ID", OtherKey="ListID")]
		public EntitySet<DeliveryListOrder> DeliveryListOrders
		{
			get
			{
				return this._DeliveryListOrders;
			}
			set
			{
				this._DeliveryListOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_DeliveryList", Storage="_Shop", ThisKey="ShopID", OtherKey="ID", IsForeignKey=true)]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.DeliveryLists.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.DeliveryLists.Add(this);
						this._ShopID = value.ID;
					}
					else
					{
						this._ShopID = default(int);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DeliveryList", Storage="_User", ThisKey="ApprovedBy", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DeliveryLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DeliveryLists.Add(this);
						this._ApprovedBy = value.ID;
					}
					else
					{
						this._ApprovedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeliveryListOrders(DeliveryListOrder entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryList = this;
		}
		
		private void detach_DeliveryListOrders(DeliveryListOrder entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GraphConstructor")]
	public partial class GraphConstructor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _GraphUID;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _ParentID;
		
		private string _Name;
		
		private int _PointPeriod;
		
		private int _UserID;
		
		private int _ShopID;
		
		private EntityRef<Shop> _Shop;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGraphUIDChanging(string value);
    partial void OnGraphUIDChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPointPeriodChanging(int value);
    partial void OnPointPeriodChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnShopIDChanging(int value);
    partial void OnShopIDChanged();
    #endregion
		
		public GraphConstructor()
		{
			this._Shop = default(EntityRef<Shop>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraphUID", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string GraphUID
		{
			get
			{
				return this._GraphUID;
			}
			set
			{
				if ((this._GraphUID != value))
				{
					this.OnGraphUIDChanging(value);
					this.SendPropertyChanging();
					this._GraphUID = value;
					this.SendPropertyChanged("GraphUID");
					this.OnGraphUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointPeriod", DbType="Int NOT NULL")]
		public int PointPeriod
		{
			get
			{
				return this._PointPeriod;
			}
			set
			{
				if ((this._PointPeriod != value))
				{
					this.OnPointPeriodChanging(value);
					this.SendPropertyChanging();
					this._PointPeriod = value;
					this.SendPropertyChanged("PointPeriod");
					this.OnPointPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int NOT NULL")]
		public int ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_GraphConstructor", Storage="_Shop", ThisKey="ShopID", OtherKey="ID", IsForeignKey=true)]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.GraphConstructors.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.GraphConstructors.Add(this);
						this._ShopID = value.ID;
					}
					else
					{
						this._ShopID = default(int);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GraphConstructor", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GraphConstructors.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GraphConstructors.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
